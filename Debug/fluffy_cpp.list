
fluffy_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006060  08006060  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006068  08006068  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006068  08006068  00016068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800606c  0800606c  0001606c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ab8  20000010  08006080  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ac8  08006080  00024ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b45  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b13  00000000  00000000  00032b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00035698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00036568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002998  00000000  00000000  00037350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010789  00000000  00000000  00039ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e67c  00000000  00000000  0004a471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8aed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d08  00000000  00000000  000d8b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fe0 	.word	0x08005fe0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005fe0 	.word	0x08005fe0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fb24 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f81e 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f91a 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f4:	f000 f8f8 	bl	80006e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 f878 	bl	80005ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004fc:	f000 f8a0 	bl	8000640 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000500:	f000 f8c8 	bl	8000694 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f002 ffe2 	bl	80034cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <main+0x3c>)
 800050a:	2100      	movs	r1, #0
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <main+0x40>)
 800050e:	f003 f827 	bl	8003560 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <main+0x44>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f002 fffc 	bl	8003514 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x38>
 800051e:	bf00      	nop
 8000520:	0800601c 	.word	0x0800601c
 8000524:	080007d1 	.word	0x080007d1
 8000528:	20000170 	.word	0x20000170

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f005 fd48 	bl	8005fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <SystemClock_Config+0xb8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <SystemClock_Config+0xb8>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <SystemClock_Config+0xb8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <SystemClock_Config+0xbc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <SystemClock_Config+0xbc>)
 800057a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <SystemClock_Config+0xbc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fa05 	bl	80019b0 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005ac:	f000 f930 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fc68 	bl	8001ea0 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d6:	f000 f91b 	bl	8000810 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <MX_USART1_UART_Init+0x50>)
 80005f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 80005f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 8000624:	f001 fe1c 	bl	8002260 <HAL_UART_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800062e:	f000 f8ef 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000044 	.word	0x20000044
 800063c:	40011000 	.word	0x40011000

08000640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_USART2_UART_Init+0x4c>)
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <MX_USART2_UART_Init+0x50>)
 8000648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_USART2_UART_Init+0x4c>)
 800064c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_USART2_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_USART2_UART_Init+0x4c>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_USART2_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_USART2_UART_Init+0x4c>)
 8000678:	f001 fdf2 	bl	8002260 <HAL_UART_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000682:	f000 f8c5 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000088 	.word	0x20000088
 8000690:	40004400 	.word	0x40004400

08000694 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART6_UART_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_USART6_UART_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_USART6_UART_Init+0x4c>)
 80006a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART6_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART6_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART6_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART6_UART_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART6_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART6_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART6_UART_Init+0x4c>)
 80006cc:	f001 fdc8 	bl	8002260 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80006d6:	f000 f89b 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000cc 	.word	0x200000cc
 80006e4:	40011400 	.word	0x40011400

080006e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_DMA_Init+0x3c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <MX_DMA_Init+0x3c>)
 80006f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_DMA_Init+0x3c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2105      	movs	r1, #5
 800070e:	2039      	movs	r0, #57	; 0x39
 8000710:	f000 fb5d 	bl	8000dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000714:	2039      	movs	r0, #57	; 0x39
 8000716:	f000 fb76 	bl	8000e06 <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_GPIO_Init+0x80>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0x84>)
 800077e:	f001 f8e3 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0x84>)
 800079c:	f000 ff50 	bl	8001640 <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020800 	.word	0x40020800

080007b0 <HAL_UART_RxCpltCallback>:

char serialBuffer[100];
int serialBufferLength;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    //HAL_UART_Transmit(&huart1, UART1_rxBuffer, 12, 100);
    //HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 12);

	received =1;
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <HAL_UART_RxCpltCallback+0x1c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000040 	.word	0x20000040

080007d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_UART_Receive_DMA (&huart6, UART6_rxBuffer, 20);
 80007d8:	2214      	movs	r2, #20
 80007da:	490a      	ldr	r1, [pc, #40]	; (8000804 <StartDefaultTask+0x34>)
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <StartDefaultTask+0x38>)
 80007de:	f001 fd8c 	bl	80022fa <HAL_UART_Receive_DMA>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <StartDefaultTask+0x3c>)
 80007ea:	f001 f8ad 	bl	8001948 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	osDelay(5000);
 80007ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f2:	f002 ff47 	bl	8003684 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <StartDefaultTask+0x3c>)
 80007fc:	f001 f8bd 	bl	800197a <HAL_GPIO_TogglePin>
	osDelay(5000);
 8000800:	e7f5      	b.n	80007ee <StartDefaultTask+0x1e>
 8000802:	bf00      	nop
 8000804:	2000002c 	.word	0x2000002c
 8000808:	200000cc 	.word	0x200000cc
 800080c:	40020800 	.word	0x40020800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_MspInit+0x54>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <HAL_MspInit+0x54>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_MspInit+0x54>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_MspInit+0x54>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <HAL_MspInit+0x54>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_MspInit+0x54>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	210f      	movs	r1, #15
 800085e:	f06f 0001 	mvn.w	r0, #1
 8000862:	f000 fab4 	bl	8000dce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	; 0x38
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a67      	ldr	r2, [pc, #412]	; (8000a30 <HAL_UART_MspInit+0x1bc>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d12d      	bne.n	80008f2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
 800089a:	4b66      	ldr	r3, [pc, #408]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a65      	ldr	r2, [pc, #404]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 80008a0:	f043 0310 	orr.w	r3, r3, #16
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b63      	ldr	r3, [pc, #396]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	623b      	str	r3, [r7, #32]
 80008b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	4b5f      	ldr	r3, [pc, #380]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a5e      	ldr	r2, [pc, #376]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b5c      	ldr	r3, [pc, #368]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RP203_TX_Pin|RP203_RX_Pin;
 80008ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008e0:	2307      	movs	r3, #7
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	4853      	ldr	r0, [pc, #332]	; (8000a38 <HAL_UART_MspInit+0x1c4>)
 80008ec:	f000 fea8 	bl	8001640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80008f0:	e099      	b.n	8000a26 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a51      	ldr	r2, [pc, #324]	; (8000a3c <HAL_UART_MspInit+0x1c8>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d12c      	bne.n	8000956 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	4a4b      	ldr	r2, [pc, #300]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 8000906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090a:	6413      	str	r3, [r2, #64]	; 0x40
 800090c:	4b49      	ldr	r3, [pc, #292]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	4a44      	ldr	r2, [pc, #272]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6313      	str	r3, [r2, #48]	; 0x30
 8000928:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 8000934:	230c      	movs	r3, #12
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000944:	2307      	movs	r3, #7
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	483a      	ldr	r0, [pc, #232]	; (8000a38 <HAL_UART_MspInit+0x1c4>)
 8000950:	f000 fe76 	bl	8001640 <HAL_GPIO_Init>
}
 8000954:	e067      	b.n	8000a26 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART6)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a39      	ldr	r2, [pc, #228]	; (8000a40 <HAL_UART_MspInit+0x1cc>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d162      	bne.n	8000a26 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 8000966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000968:	4a32      	ldr	r2, [pc, #200]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 800096a:	f043 0320 	orr.w	r3, r3, #32
 800096e:	6453      	str	r3, [r2, #68]	; 0x44
 8000970:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 8000972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000974:	f003 0320 	and.w	r3, r3, #32
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	4a2b      	ldr	r2, [pc, #172]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	6313      	str	r3, [r2, #48]	; 0x30
 800098c:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <HAL_UART_MspInit+0x1c0>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MH_TX_Pin|MH_RX_Pin;
 8000998:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80009aa:	2308      	movs	r3, #8
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4820      	ldr	r0, [pc, #128]	; (8000a38 <HAL_UART_MspInit+0x1c4>)
 80009b6:	f000 fe43 	bl	8001640 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <HAL_UART_MspInit+0x1d4>)
 80009be:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 80009c2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80009c6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 80009d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009da:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80009fa:	4812      	ldr	r0, [pc, #72]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 80009fc:	f000 fa1e 	bl	8000e3c <HAL_DMA_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_UART_MspInit+0x196>
      Error_Handler();
 8000a06:	f7ff ff03 	bl	8000810 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 8000a0e:	639a      	str	r2, [r3, #56]	; 0x38
 8000a10:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <HAL_UART_MspInit+0x1d0>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2105      	movs	r1, #5
 8000a1a:	2047      	movs	r0, #71	; 0x47
 8000a1c:	f000 f9d7 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000a20:	2047      	movs	r0, #71	; 0x47
 8000a22:	f000 f9f0 	bl	8000e06 <HAL_NVIC_EnableIRQ>
}
 8000a26:	bf00      	nop
 8000a28:	3738      	adds	r7, #56	; 0x38
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40011000 	.word	0x40011000
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40004400 	.word	0x40004400
 8000a40:	40011400 	.word	0x40011400
 8000a44:	20000110 	.word	0x20000110
 8000a48:	40026428 	.word	0x40026428

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 f8ac 	bl	8000bd8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a80:	f004 fa0e 	bl	8004ea0 <xTaskGetSchedulerState>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d001      	beq.n	8000a8e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a8a:	f004 fff5 	bl	8005a78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <DMA2_Stream1_IRQHandler+0x10>)
 8000a9a:	f000 fb67 	bl	800116c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000110 	.word	0x20000110

08000aa8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <USART6_IRQHandler+0x10>)
 8000aae:	f001 fc55 	bl	800235c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000cc 	.word	0x200000cc

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <SystemInit+0x20>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <SystemInit+0x20>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae6:	490e      	ldr	r1, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000afc:	4c0b      	ldr	r4, [pc, #44]	; (8000b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b0a:	f7ff ffd7 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f005 fa2d 	bl	8005f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b12:	f7ff fce7 	bl	80004e4 <main>
  bx  lr    
 8000b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b24:	08006070 	.word	0x08006070
  ldr r2, =_sbss
 8000b28:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b2c:	20004ac8 	.word	0x20004ac8

08000b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC_IRQHandler>
	...

08000b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <HAL_Init+0x40>)
 8000b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_Init+0x40>)
 8000b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_Init+0x40>)
 8000b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f92b 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f000 f808 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff fe58 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023c00 	.word	0x40023c00

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x54>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x58>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f943 	bl	8000e22 <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00e      	b.n	8000bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d80a      	bhi.n	8000bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 f90b 	bl	8000dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_InitTick+0x5c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000174 	.word	0x20000174

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000174 	.word	0x20000174

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff29 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff3e 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff31 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffa2 	bl	8000d74 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff feda 	bl	8000c00 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e099      	b.n	8000f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0201 	bic.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e78:	e00f      	b.n	8000e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e7a:	f7ff fec1 	bl	8000c00 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	d908      	bls.n	8000e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2203      	movs	r2, #3
 8000e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e078      	b.n	8000f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1e8      	bne.n	8000e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <HAL_DMA_Init+0x158>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d107      	bne.n	8000f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4313      	orrs	r3, r2
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f023 0307 	bic.w	r3, r3, #7
 8000f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d117      	bne.n	8000f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00e      	beq.n	8000f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fb01 	bl	8001548 <DMA_CheckFifoParam>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d008      	beq.n	8000f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2240      	movs	r2, #64	; 0x40
 8000f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e016      	b.n	8000f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 fab8 	bl	80014dc <DMA_CalcBaseAndBitshift>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f74:	223f      	movs	r2, #63	; 0x3f
 8000f76:	409a      	lsls	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	f010803f 	.word	0xf010803f

08000f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d101      	bne.n	8000fbe <HAL_DMA_Start_IT+0x26>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e040      	b.n	8001040 <HAL_DMA_Start_IT+0xa8>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d12f      	bne.n	8001032 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f000 fa4a 	bl	8001480 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff0:	223f      	movs	r2, #63	; 0x3f
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0216 	orr.w	r2, r2, #22
 8001006:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	2b00      	cmp	r3, #0
 800100e:	d007      	beq.n	8001020 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0208 	orr.w	r2, r2, #8
 800101e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e005      	b.n	800103e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800103a:	2302      	movs	r3, #2
 800103c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001054:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001056:	f7ff fdd3 	bl	8000c00 <HAL_GetTick>
 800105a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d008      	beq.n	800107a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e052      	b.n	8001120 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0216 	bic.w	r2, r2, #22
 8001088:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001098:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <HAL_DMA_Abort+0x62>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d007      	beq.n	80010ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0208 	bic.w	r2, r2, #8
 80010b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ca:	e013      	b.n	80010f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010cc:	f7ff fd98 	bl	8000c00 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d90c      	bls.n	80010f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2220      	movs	r2, #32
 80010de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e015      	b.n	8001120 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1e4      	bne.n	80010cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001106:	223f      	movs	r2, #63	; 0x3f
 8001108:	409a      	lsls	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d004      	beq.n	8001146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00c      	b.n	8001160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2205      	movs	r2, #5
 800114a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001178:	4b8e      	ldr	r3, [pc, #568]	; (80013b4 <HAL_DMA_IRQHandler+0x248>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a8e      	ldr	r2, [pc, #568]	; (80013b8 <HAL_DMA_IRQHandler+0x24c>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0a9b      	lsrs	r3, r3, #10
 8001184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001196:	2208      	movs	r2, #8
 8001198:	409a      	lsls	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d01a      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d013      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0204 	bic.w	r2, r2, #4
 80011be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c4:	2208      	movs	r2, #8
 80011c6:	409a      	lsls	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	f043 0201 	orr.w	r2, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011dc:	2201      	movs	r2, #1
 80011de:	409a      	lsls	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d012      	beq.n	800120e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fa:	2201      	movs	r2, #1
 80011fc:	409a      	lsls	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001206:	f043 0202 	orr.w	r2, r3, #2
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001212:	2204      	movs	r2, #4
 8001214:	409a      	lsls	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d012      	beq.n	8001244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00b      	beq.n	8001244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2204      	movs	r2, #4
 8001232:	409a      	lsls	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123c:	f043 0204 	orr.w	r2, r3, #4
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001248:	2210      	movs	r2, #16
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d043      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03c      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	2210      	movs	r2, #16
 8001268:	409a      	lsls	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d018      	beq.n	80012ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d108      	bne.n	800129c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	d024      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	4798      	blx	r3
 800129a:	e01f      	b.n	80012dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d01b      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	4798      	blx	r3
 80012ac:	e016      	b.n	80012dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d107      	bne.n	80012cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0208 	bic.w	r2, r2, #8
 80012ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e0:	2220      	movs	r2, #32
 80012e2:	409a      	lsls	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 808f 	beq.w	800140c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 8087 	beq.w	800140c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001302:	2220      	movs	r2, #32
 8001304:	409a      	lsls	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b05      	cmp	r3, #5
 8001314:	d136      	bne.n	8001384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0216 	bic.w	r2, r2, #22
 8001324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <HAL_DMA_IRQHandler+0x1da>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0208 	bic.w	r2, r2, #8
 8001354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135a:	223f      	movs	r2, #63	; 0x3f
 800135c:	409a      	lsls	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001376:	2b00      	cmp	r3, #0
 8001378:	d07e      	beq.n	8001478 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	4798      	blx	r3
        }
        return;
 8001382:	e079      	b.n	8001478 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d01d      	beq.n	80013ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10d      	bne.n	80013bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d031      	beq.n	800140c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
 80013b0:	e02c      	b.n	800140c <HAL_DMA_IRQHandler+0x2a0>
 80013b2:	bf00      	nop
 80013b4:	20000000 	.word	0x20000000
 80013b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d023      	beq.n	800140c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	4798      	blx	r3
 80013cc:	e01e      	b.n	800140c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10f      	bne.n	80013fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0210 	bic.w	r2, r2, #16
 80013ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001410:	2b00      	cmp	r3, #0
 8001412:	d032      	beq.n	800147a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d022      	beq.n	8001466 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2205      	movs	r2, #5
 8001424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3301      	adds	r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	d307      	bcc.n	8001454 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f2      	bne.n	8001438 <HAL_DMA_IRQHandler+0x2cc>
 8001452:	e000      	b.n	8001456 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001454:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
 8001476:	e000      	b.n	800147a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001478:	bf00      	nop
    }
  }
}
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800149c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b40      	cmp	r3, #64	; 0x40
 80014ac:	d108      	bne.n	80014c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014be:	e007      	b.n	80014d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	3b10      	subs	r3, #16
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <DMA_CalcBaseAndBitshift+0x64>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <DMA_CalcBaseAndBitshift+0x68>)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d909      	bls.n	800151e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	1d1a      	adds	r2, r3, #4
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	659a      	str	r2, [r3, #88]	; 0x58
 800151c:	e007      	b.n	800152e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001526:	f023 0303 	bic.w	r3, r3, #3
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	aaaaaaab 	.word	0xaaaaaaab
 8001544:	08006058 	.word	0x08006058

08001548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d11f      	bne.n	80015a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d856      	bhi.n	8001616 <DMA_CheckFifoParam+0xce>
 8001568:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <DMA_CheckFifoParam+0x28>)
 800156a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156e:	bf00      	nop
 8001570:	08001581 	.word	0x08001581
 8001574:	08001593 	.word	0x08001593
 8001578:	08001581 	.word	0x08001581
 800157c:	08001617 	.word	0x08001617
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d046      	beq.n	800161a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001590:	e043      	b.n	800161a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800159a:	d140      	bne.n	800161e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015a0:	e03d      	b.n	800161e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015aa:	d121      	bne.n	80015f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d837      	bhi.n	8001622 <DMA_CheckFifoParam+0xda>
 80015b2:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <DMA_CheckFifoParam+0x70>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015cf 	.word	0x080015cf
 80015c0:	080015c9 	.word	0x080015c9
 80015c4:	080015e1 	.word	0x080015e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
      break;
 80015cc:	e030      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d025      	beq.n	8001626 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015de:	e022      	b.n	8001626 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015e8:	d11f      	bne.n	800162a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015ee:	e01c      	b.n	800162a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d903      	bls.n	80015fe <DMA_CheckFifoParam+0xb6>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d003      	beq.n	8001604 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015fc:	e018      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
      break;
 8001602:	e015      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00e      	beq.n	800162e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
      break;
 8001614:	e00b      	b.n	800162e <DMA_CheckFifoParam+0xe6>
      break;
 8001616:	bf00      	nop
 8001618:	e00a      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;
 800161a:	bf00      	nop
 800161c:	e008      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;
 800161e:	bf00      	nop
 8001620:	e006      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;
 8001622:	bf00      	nop
 8001624:	e004      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;
 8001626:	bf00      	nop
 8001628:	e002      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;   
 800162a:	bf00      	nop
 800162c:	e000      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;
 800162e:	bf00      	nop
    }
  } 
  
  return status; 
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e159      	b.n	8001910 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800165c:	2201      	movs	r2, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	429a      	cmp	r2, r3
 8001676:	f040 8148 	bne.w	800190a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b01      	cmp	r3, #1
 8001684:	d005      	beq.n	8001692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168e:	2b02      	cmp	r3, #2
 8001690:	d130      	bne.n	80016f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c8:	2201      	movs	r2, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 0201 	and.w	r2, r3, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d017      	beq.n	8001730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d123      	bne.n	8001784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	08da      	lsrs	r2, r3, #3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3208      	adds	r2, #8
 8001744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	08da      	lsrs	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3208      	adds	r2, #8
 800177e:	69b9      	ldr	r1, [r7, #24]
 8001780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0203 	and.w	r2, r3, #3
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a2 	beq.w	800190a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b57      	ldr	r3, [pc, #348]	; (8001928 <HAL_GPIO_Init+0x2e8>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a56      	ldr	r2, [pc, #344]	; (8001928 <HAL_GPIO_Init+0x2e8>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <HAL_GPIO_Init+0x2e8>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017e2:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_GPIO_Init+0x2ec>)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a49      	ldr	r2, [pc, #292]	; (8001930 <HAL_GPIO_Init+0x2f0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x202>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a48      	ldr	r2, [pc, #288]	; (8001934 <HAL_GPIO_Init+0x2f4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x1fe>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a47      	ldr	r2, [pc, #284]	; (8001938 <HAL_GPIO_Init+0x2f8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x1fa>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a46      	ldr	r2, [pc, #280]	; (800193c <HAL_GPIO_Init+0x2fc>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x1f6>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a45      	ldr	r2, [pc, #276]	; (8001940 <HAL_GPIO_Init+0x300>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x1f2>
 800182e:	2304      	movs	r3, #4
 8001830:	e008      	b.n	8001844 <HAL_GPIO_Init+0x204>
 8001832:	2307      	movs	r3, #7
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x204>
 8001836:	2303      	movs	r3, #3
 8001838:	e004      	b.n	8001844 <HAL_GPIO_Init+0x204>
 800183a:	2302      	movs	r3, #2
 800183c:	e002      	b.n	8001844 <HAL_GPIO_Init+0x204>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_GPIO_Init+0x204>
 8001842:	2300      	movs	r3, #0
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	f002 0203 	and.w	r2, r2, #3
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	4093      	lsls	r3, r2
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001854:	4935      	ldr	r1, [pc, #212]	; (800192c <HAL_GPIO_Init+0x2ec>)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <HAL_GPIO_Init+0x304>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001886:	4a2f      	ldr	r2, [pc, #188]	; (8001944 <HAL_GPIO_Init+0x304>)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_GPIO_Init+0x304>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b0:	4a24      	ldr	r2, [pc, #144]	; (8001944 <HAL_GPIO_Init+0x304>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_GPIO_Init+0x304>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018da:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <HAL_GPIO_Init+0x304>)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_GPIO_Init+0x304>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001904:	4a0f      	ldr	r2, [pc, #60]	; (8001944 <HAL_GPIO_Init+0x304>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3301      	adds	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	f67f aea2 	bls.w	800165c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	40013800 	.word	0x40013800
 8001930:	40020000 	.word	0x40020000
 8001934:	40020400 	.word	0x40020400
 8001938:	40020800 	.word	0x40020800
 800193c:	40020c00 	.word	0x40020c00
 8001940:	40021000 	.word	0x40021000
 8001944:	40013c00 	.word	0x40013c00

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001964:	e003      	b.n	800196e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	041a      	lsls	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800197a:	b480      	push	{r7}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800198c:	887a      	ldrh	r2, [r7, #2]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4013      	ands	r3, r2
 8001992:	041a      	lsls	r2, r3, #16
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43d9      	mvns	r1, r3
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	400b      	ands	r3, r1
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]
}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e267      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d075      	beq.n	8001aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ce:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d00c      	beq.n	80019f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019da:	4b85      	ldr	r3, [pc, #532]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d112      	bne.n	8001a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e6:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019f2:	d10b      	bne.n	8001a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	4b7e      	ldr	r3, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d05b      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x108>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d157      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e242      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d106      	bne.n	8001a24 <HAL_RCC_OscConfig+0x74>
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e01d      	b.n	8001a60 <HAL_RCC_OscConfig+0xb0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x98>
 8001a2e:	4b70      	ldr	r3, [pc, #448]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6f      	ldr	r2, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6c      	ldr	r2, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0xb0>
 8001a48:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a68      	ldr	r2, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b66      	ldr	r3, [pc, #408]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a65      	ldr	r2, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d013      	beq.n	8001a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff f8ca 	bl	8000c00 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff f8c6 	bl	8000c00 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e207      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	4b5b      	ldr	r3, [pc, #364]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0xc0>
 8001a8e:	e014      	b.n	8001aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff f8b6 	bl	8000c00 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff f8b2 	bl	8000c00 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e1f3      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0xe8>
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d063      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d11c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d116      	bne.n	8001b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_OscConfig+0x152>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e1c7      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4937      	ldr	r1, [pc, #220]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	e03a      	b.n	8001b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_RCC_OscConfig+0x244>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff f86b 	bl	8000c00 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f867 	bl	8000c00 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e1a8      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4925      	ldr	r1, [pc, #148]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
 8001b60:	e015      	b.n	8001b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_RCC_OscConfig+0x244>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f84a 	bl	8000c00 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b70:	f7ff f846 	bl	8000c00 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e187      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d036      	beq.n	8001c08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d016      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x248>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f82a 	bl	8000c00 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff f826 	bl	8000c00 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e167      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x200>
 8001bce:	e01b      	b.n	8001c08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_OscConfig+0x248>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff f813 	bl	8000c00 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	e00e      	b.n	8001bfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bde:	f7ff f80f 	bl	8000c00 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d907      	bls.n	8001bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e150      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	42470000 	.word	0x42470000
 8001bf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfc:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ea      	bne.n	8001bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8097 	beq.w	8001d44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b81      	ldr	r3, [pc, #516]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10f      	bne.n	8001c46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b7d      	ldr	r3, [pc, #500]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a7c      	ldr	r2, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b77      	ldr	r3, [pc, #476]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c52:	4b74      	ldr	r3, [pc, #464]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a73      	ldr	r2, [pc, #460]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5e:	f7fe ffcf 	bl	8000c00 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7fe ffcb 	bl	8000c00 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e10c      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x474>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x2ea>
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a63      	ldr	r2, [pc, #396]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	e01c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x324>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x30c>
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a5e      	ldr	r2, [pc, #376]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
 8001cae:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	4a5b      	ldr	r2, [pc, #364]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0x324>
 8001cbc:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	f023 0301 	bic.w	r3, r3, #1
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc8:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	4a54      	ldr	r2, [pc, #336]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cce:	f023 0304 	bic.w	r3, r3, #4
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d015      	beq.n	8001d08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7fe ff90 	bl	8000c00 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7fe ff8c 	bl	8000c00 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e0cb      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfa:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0ee      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x334>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d08:	f7fe ff7a 	bl	8000c00 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7fe ff76 	bl	8000c00 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0b5      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d26:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1ee      	bne.n	8001d10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	4a38      	ldr	r2, [pc, #224]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80a1 	beq.w	8001e90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d05c      	beq.n	8001e14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d141      	bne.n	8001de6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_RCC_OscConfig+0x478>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7fe ff4a 	bl	8000c00 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7fe ff46 	bl	8000c00 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e087      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	019b      	lsls	r3, r3, #6
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	3b01      	subs	r3, #1
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	491b      	ldr	r1, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_RCC_OscConfig+0x478>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe ff1f 	bl	8000c00 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe ff1b 	bl	8000c00 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e05c      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x416>
 8001de4:	e054      	b.n	8001e90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_OscConfig+0x478>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe ff08 	bl	8000c00 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df4:	f7fe ff04 	bl	8000c00 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e045      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_OscConfig+0x470>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x444>
 8001e12:	e03d      	b.n	8001e90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e038      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000
 8001e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x4ec>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d028      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d121      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d11a      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d111      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	3b01      	subs	r3, #1
 8001e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0cc      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b68      	ldr	r3, [pc, #416]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d90c      	bls.n	8001edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b65      	ldr	r3, [pc, #404]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0b8      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d020      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef4:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f0c:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a52      	ldr	r2, [pc, #328]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	494d      	ldr	r1, [pc, #308]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d044      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d119      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e07f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e06f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e067      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4934      	ldr	r1, [pc, #208]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f90:	f7fe fe36 	bl	8000c00 <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7fe fe32 	bl	8000c00 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e04f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 020c 	and.w	r2, r3, #12
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d1eb      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d20c      	bcs.n	8001fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e032      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4916      	ldr	r1, [pc, #88]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	490e      	ldr	r1, [pc, #56]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002026:	f000 f821 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800202a:	4602      	mov	r2, r0
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	490a      	ldr	r1, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	5ccb      	ldrb	r3, [r1, r3]
 800203a:	fa22 f303 	lsr.w	r3, r2, r3
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fd96 	bl	8000b78 <HAL_InitTick>

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023c00 	.word	0x40023c00
 800205c:	40023800 	.word	0x40023800
 8002060:	08006040 	.word	0x08006040
 8002064:	20000000 	.word	0x20000000
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002070:	b090      	sub	sp, #64	; 0x40
 8002072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
 8002078:	2300      	movs	r3, #0
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	2300      	movs	r3, #0
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b08      	cmp	r3, #8
 800208e:	d00d      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x40>
 8002090:	2b08      	cmp	r3, #8
 8002092:	f200 80a1 	bhi.w	80021d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x34>
 800209a:	2b04      	cmp	r3, #4
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800209e:	e09b      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020a4:	e09b      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020a6:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020aa:	e098      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020ac:	4b4f      	ldr	r3, [pc, #316]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b6:	4b4d      	ldr	r3, [pc, #308]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d028      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c2:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	2200      	movs	r2, #0
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	627a      	str	r2, [r7, #36]	; 0x24
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020d4:	2100      	movs	r1, #0
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020d8:	fb03 f201 	mul.w	r2, r3, r1
 80020dc:	2300      	movs	r3, #0
 80020de:	fb00 f303 	mul.w	r3, r0, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	4a43      	ldr	r2, [pc, #268]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020e6:	fba0 1202 	umull	r1, r2, r0, r2
 80020ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020ec:	460a      	mov	r2, r1
 80020ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80020f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f2:	4413      	add	r3, r2
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f8:	2200      	movs	r2, #0
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	61fa      	str	r2, [r7, #28]
 80020fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002102:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002106:	f7fe f86b 	bl	80001e0 <__aeabi_uldivmod>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4613      	mov	r3, r2
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002112:	e053      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	2200      	movs	r2, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	617a      	str	r2, [r7, #20]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002126:	f04f 0b00 	mov.w	fp, #0
 800212a:	4652      	mov	r2, sl
 800212c:	465b      	mov	r3, fp
 800212e:	f04f 0000 	mov.w	r0, #0
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	0159      	lsls	r1, r3, #5
 8002138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800213c:	0150      	lsls	r0, r2, #5
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	ebb2 080a 	subs.w	r8, r2, sl
 8002146:	eb63 090b 	sbc.w	r9, r3, fp
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002156:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800215a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800215e:	ebb2 0408 	subs.w	r4, r2, r8
 8002162:	eb63 0509 	sbc.w	r5, r3, r9
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	00eb      	lsls	r3, r5, #3
 8002170:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002174:	00e2      	lsls	r2, r4, #3
 8002176:	4614      	mov	r4, r2
 8002178:	461d      	mov	r5, r3
 800217a:	eb14 030a 	adds.w	r3, r4, sl
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	eb45 030b 	adc.w	r3, r5, fp
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002192:	4629      	mov	r1, r5
 8002194:	028b      	lsls	r3, r1, #10
 8002196:	4621      	mov	r1, r4
 8002198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800219c:	4621      	mov	r1, r4
 800219e:	028a      	lsls	r2, r1, #10
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a6:	2200      	movs	r2, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	60fa      	str	r2, [r7, #12]
 80021ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b0:	f7fe f816 	bl	80001e0 <__aeabi_uldivmod>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4613      	mov	r3, r2
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_GetSysClockFreq+0x180>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	3301      	adds	r3, #1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80021da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3740      	adds	r7, #64	; 0x40
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	00f42400 	.word	0x00f42400
 80021f4:	017d7840 	.word	0x017d7840

080021f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_RCC_GetHCLKFreq+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000000 	.word	0x20000000

08002210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002214:	f7ff fff0 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	0a9b      	lsrs	r3, r3, #10
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4903      	ldr	r1, [pc, #12]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	08006050 	.word	0x08006050

08002238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800223c:	f7ff ffdc 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0b5b      	lsrs	r3, r3, #13
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4903      	ldr	r1, [pc, #12]	; (800225c <HAL_RCC_GetPCLK2Freq+0x24>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	08006050 	.word	0x08006050

08002260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e03f      	b.n	80022f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe faf4 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	; 0x24
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fe69 	bl	8002f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	4613      	mov	r3, r2
 8002306:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b20      	cmp	r3, #32
 8002312:	d11d      	bne.n	8002350 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_UART_Receive_DMA+0x26>
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e016      	b.n	8002352 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_UART_Receive_DMA+0x38>
 800232e:	2302      	movs	r3, #2
 8002330:	e00f      	b.n	8002352 <HAL_UART_Receive_DMA+0x58>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	461a      	mov	r2, r3
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fbb8 	bl	8002abc <UART_Start_Receive_DMA>
 800234c:	4603      	mov	r3, r0
 800234e:	e000      	b.n	8002352 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b0ba      	sub	sp, #232	; 0xe8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800238e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800239a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10f      	bne.n	80023c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_UART_IRQHandler+0x66>
 80023ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fd23 	bl	8002e06 <UART_Receive_IT>
      return;
 80023c0:	e256      	b.n	8002870 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80de 	beq.w	8002588 <HAL_UART_IRQHandler+0x22c>
 80023cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80d1 	beq.w	8002588 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <HAL_UART_IRQHandler+0xae>
 80023f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f043 0201 	orr.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800240a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_UART_IRQHandler+0xd2>
 8002416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f043 0202 	orr.w	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800242e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_UART_IRQHandler+0xf6>
 800243a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f043 0204 	orr.w	r2, r3, #4
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d011      	beq.n	8002482 <HAL_UART_IRQHandler+0x126>
 800245e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800246a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f043 0208 	orr.w	r2, r3, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 81ed 	beq.w	8002866 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800248c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_UART_IRQHandler+0x14e>
 8002498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fcae 	bl	8002e06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d103      	bne.n	80024d6 <HAL_UART_IRQHandler+0x17a>
 80024ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d04f      	beq.n	8002576 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fbb6 	bl	8002c48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d141      	bne.n	800256e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3314      	adds	r3, #20
 80024f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024f8:	e853 3f00 	ldrex	r3, [r3]
 80024fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3314      	adds	r3, #20
 8002512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002516:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800251a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002526:	e841 2300 	strex	r3, r2, [r1]
 800252a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800252e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1d9      	bne.n	80024ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	2b00      	cmp	r3, #0
 800253c:	d013      	beq.n	8002566 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	4a7d      	ldr	r2, [pc, #500]	; (8002738 <HAL_UART_IRQHandler+0x3dc>)
 8002544:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fdec 	bl	8001128 <HAL_DMA_Abort_IT>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002560:	4610      	mov	r0, r2
 8002562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002564:	e00e      	b.n	8002584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f99a 	bl	80028a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256c:	e00a      	b.n	8002584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f996 	bl	80028a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002574:	e006      	b.n	8002584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f992 	bl	80028a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002582:	e170      	b.n	8002866 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002584:	bf00      	nop
    return;
 8002586:	e16e      	b.n	8002866 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	2b01      	cmp	r3, #1
 800258e:	f040 814a 	bne.w	8002826 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8143 	beq.w	8002826 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 813c 	beq.w	8002826 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	f040 80b4 	bne.w	800273c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8140 	beq.w	800286a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025f2:	429a      	cmp	r2, r3
 80025f4:	f080 8139 	bcs.w	800286a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260a:	f000 8088 	beq.w	800271e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	330c      	adds	r3, #12
 8002614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800261c:	e853 3f00 	ldrex	r3, [r3]
 8002620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800262c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800263a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800263e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002642:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800264a:	e841 2300 	strex	r3, r2, [r1]
 800264e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1d9      	bne.n	800260e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3314      	adds	r3, #20
 8002660:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800266a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3314      	adds	r3, #20
 800267a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800267e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002682:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002684:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002686:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e1      	bne.n	800265a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3314      	adds	r3, #20
 800269c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80026a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3314      	adds	r3, #20
 80026b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80026ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026c2:	e841 2300 	strex	r3, r2, [r1]
 80026c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e3      	bne.n	8002696 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e6:	e853 3f00 	ldrex	r3, [r3]
 80026ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ee:	f023 0310 	bic.w	r3, r3, #16
 80026f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002700:	65ba      	str	r2, [r7, #88]	; 0x58
 8002702:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002704:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002706:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002708:	e841 2300 	strex	r3, r2, [r1]
 800270c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800270e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e3      	bne.n	80026dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe fc95 	bl	8001048 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002726:	b29b      	uxth	r3, r3
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	b29b      	uxth	r3, r3
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8c0 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002734:	e099      	b.n	800286a <HAL_UART_IRQHandler+0x50e>
 8002736:	bf00      	nop
 8002738:	08002d0f 	.word	0x08002d0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002744:	b29b      	uxth	r3, r3
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 808b 	beq.w	800286e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8086 	beq.w	800286e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	330c      	adds	r3, #12
 8002768:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276c:	e853 3f00 	ldrex	r3, [r3]
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002778:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002786:	647a      	str	r2, [r7, #68]	; 0x44
 8002788:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800278c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800278e:	e841 2300 	strex	r3, r2, [r1]
 8002792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e3      	bne.n	8002762 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3314      	adds	r3, #20
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	e853 3f00 	ldrex	r3, [r3]
 80027a8:	623b      	str	r3, [r7, #32]
   return(result);
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3314      	adds	r3, #20
 80027ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027be:	633a      	str	r2, [r7, #48]	; 0x30
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e3      	bne.n	800279a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	330c      	adds	r3, #12
 80027e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	e853 3f00 	ldrex	r3, [r3]
 80027ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0310 	bic.w	r3, r3, #16
 80027f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	330c      	adds	r3, #12
 8002800:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002804:	61fa      	str	r2, [r7, #28]
 8002806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002808:	69b9      	ldr	r1, [r7, #24]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	e841 2300 	strex	r3, r2, [r1]
 8002810:	617b      	str	r3, [r7, #20]
   return(result);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e3      	bne.n	80027e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800281c:	4619      	mov	r1, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f848 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002824:	e023      	b.n	800286e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800282a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_UART_IRQHandler+0x4ea>
 8002832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fa79 	bl	8002d36 <UART_Transmit_IT>
    return;
 8002844:	e014      	b.n	8002870 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00e      	beq.n	8002870 <HAL_UART_IRQHandler+0x514>
 8002852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fab9 	bl	8002dd6 <UART_EndTransmit_IT>
    return;
 8002864:	e004      	b.n	8002870 <HAL_UART_IRQHandler+0x514>
    return;
 8002866:	bf00      	nop
 8002868:	e002      	b.n	8002870 <HAL_UART_IRQHandler+0x514>
      return;
 800286a:	bf00      	nop
 800286c:	e000      	b.n	8002870 <HAL_UART_IRQHandler+0x514>
      return;
 800286e:	bf00      	nop
  }
}
 8002870:	37e8      	adds	r7, #232	; 0xe8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop

08002878 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b09c      	sub	sp, #112	; 0x70
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d172      	bne.n	80029ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80028e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ea:	2200      	movs	r2, #0
 80028ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	330c      	adds	r3, #12
 80028f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002904:	66bb      	str	r3, [r7, #104]	; 0x68
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	330c      	adds	r3, #12
 800290c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800290e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002910:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800291c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e5      	bne.n	80028ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3314      	adds	r3, #20
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	667b      	str	r3, [r7, #100]	; 0x64
 800293a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3314      	adds	r3, #20
 8002940:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002942:	647a      	str	r2, [r7, #68]	; 0x44
 8002944:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002946:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800294a:	e841 2300 	strex	r3, r2, [r1]
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1e5      	bne.n	8002922 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3314      	adds	r3, #20
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	623b      	str	r3, [r7, #32]
   return(result);
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800296c:	663b      	str	r3, [r7, #96]	; 0x60
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3314      	adds	r3, #20
 8002974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002976:	633a      	str	r2, [r7, #48]	; 0x30
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800297c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e5      	bne.n	8002956 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800298a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	2b01      	cmp	r3, #1
 8002998:	d119      	bne.n	80029ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800299a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	e853 3f00 	ldrex	r3, [r3]
 80029a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f023 0310 	bic.w	r3, r3, #16
 80029b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	330c      	adds	r3, #12
 80029b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029ba:	61fa      	str	r2, [r7, #28]
 80029bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029be:	69b9      	ldr	r1, [r7, #24]
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	e841 2300 	strex	r3, r2, [r1]
 80029c6:	617b      	str	r3, [r7, #20]
   return(result);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1e5      	bne.n	800299a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d106      	bne.n	80029e4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029da:	4619      	mov	r1, r3
 80029dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80029de:	f7ff ff69 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80029e2:	e002      	b.n	80029ea <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80029e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80029e6:	f7fd fee3 	bl	80007b0 <HAL_UART_RxCpltCallback>
}
 80029ea:	bf00      	nop
 80029ec:	3770      	adds	r7, #112	; 0x70
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d108      	bne.n	8002a1a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	4619      	mov	r1, r3
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff ff4e 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a18:	e002      	b.n	8002a20 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f7ff ff36 	bl	800288c <HAL_UART_RxHalfCpltCallback>
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a44:	2b80      	cmp	r3, #128	; 0x80
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b21      	cmp	r3, #33	; 0x21
 8002a5a:	d108      	bne.n	8002a6e <UART_DMAError+0x46>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2200      	movs	r2, #0
 8002a66:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002a68:	68b8      	ldr	r0, [r7, #8]
 8002a6a:	f000 f8c5 	bl	8002bf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b22      	cmp	r3, #34	; 0x22
 8002a8e:	d108      	bne.n	8002aa2 <UART_DMAError+0x7a>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002a9c:	68b8      	ldr	r0, [r7, #8]
 8002a9e:	f000 f8d3 	bl	8002c48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aae:	68b8      	ldr	r0, [r7, #8]
 8002ab0:	f7ff fef6 	bl	80028a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b098      	sub	sp, #96	; 0x60
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2222      	movs	r2, #34	; 0x22
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	4a40      	ldr	r2, [pc, #256]	; (8002bec <UART_Start_Receive_DMA+0x130>)
 8002aea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	4a3f      	ldr	r2, [pc, #252]	; (8002bf0 <UART_Start_Receive_DMA+0x134>)
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	4a3e      	ldr	r2, [pc, #248]	; (8002bf4 <UART_Start_Receive_DMA+0x138>)
 8002afa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	2200      	movs	r2, #0
 8002b02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002b04:	f107 0308 	add.w	r3, r7, #8
 8002b08:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	f7fe fa3c 	bl	8000f98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d019      	beq.n	8002b7a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	330c      	adds	r3, #12
 8002b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b6e:	e841 2300 	strex	r3, r2, [r1]
 8002b72:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1e5      	bne.n	8002b46 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	e853 3f00 	ldrex	r3, [r3]
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	657b      	str	r3, [r7, #84]	; 0x54
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3314      	adds	r3, #20
 8002b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b9a:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ba2:	e841 2300 	strex	r3, r2, [r1]
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e5      	bne.n	8002b7a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3314      	adds	r3, #20
 8002bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3314      	adds	r3, #20
 8002bcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bce:	627a      	str	r2, [r7, #36]	; 0x24
 8002bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd2:	6a39      	ldr	r1, [r7, #32]
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd6:	e841 2300 	strex	r3, r2, [r1]
 8002bda:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1e5      	bne.n	8002bae <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3760      	adds	r7, #96	; 0x60
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	080028cd 	.word	0x080028cd
 8002bf0:	080029f3 	.word	0x080029f3
 8002bf4:	08002a29 	.word	0x08002a29

08002bf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	330c      	adds	r3, #12
 8002c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	e853 3f00 	ldrex	r3, [r3]
 8002c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	61ba      	str	r2, [r7, #24]
 8002c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c24:	6979      	ldr	r1, [r7, #20]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	e841 2300 	strex	r3, r2, [r1]
 8002c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e5      	bne.n	8002c00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002c3c:	bf00      	nop
 8002c3e:	3724      	adds	r7, #36	; 0x24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b095      	sub	sp, #84	; 0x54
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	e853 3f00 	ldrex	r3, [r3]
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c70:	643a      	str	r2, [r7, #64]	; 0x40
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c78:	e841 2300 	strex	r3, r2, [r1]
 8002c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e5      	bne.n	8002c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3314      	adds	r3, #20
 8002c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	e853 3f00 	ldrex	r3, [r3]
 8002c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ca4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e5      	bne.n	8002c84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d119      	bne.n	8002cf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f023 0310 	bic.w	r3, r3, #16
 8002cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ce0:	61ba      	str	r2, [r7, #24]
 8002ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce4:	6979      	ldr	r1, [r7, #20]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	e841 2300 	strex	r3, r2, [r1]
 8002cec:	613b      	str	r3, [r7, #16]
   return(result);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e5      	bne.n	8002cc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d02:	bf00      	nop
 8002d04:	3754      	adds	r7, #84	; 0x54
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff fdb9 	bl	80028a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b21      	cmp	r3, #33	; 0x21
 8002d48:	d13e      	bne.n	8002dc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d52:	d114      	bne.n	8002d7e <UART_Transmit_IT+0x48>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d110      	bne.n	8002d7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	1c9a      	adds	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	621a      	str	r2, [r3, #32]
 8002d7c:	e008      	b.n	8002d90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	1c59      	adds	r1, r3, #1
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6211      	str	r1, [r2, #32]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10f      	bne.n	8002dc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fd3e 	bl	8002878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b08c      	sub	sp, #48	; 0x30
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b22      	cmp	r3, #34	; 0x22
 8002e18:	f040 80ab 	bne.w	8002f72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d117      	bne.n	8002e56 <UART_Receive_IT+0x50>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d113      	bne.n	8002e56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	1c9a      	adds	r2, r3, #2
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
 8002e54:	e026      	b.n	8002ea4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e68:	d007      	beq.n	8002e7a <UART_Receive_IT+0x74>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <UART_Receive_IT+0x82>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	e008      	b.n	8002e9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d15a      	bne.n	8002f6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0220 	bic.w	r2, r2, #32
 8002ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d135      	bne.n	8002f64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f023 0310 	bic.w	r3, r3, #16
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1e:	623a      	str	r2, [r7, #32]
 8002f20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	69f9      	ldr	r1, [r7, #28]
 8002f24:	6a3a      	ldr	r2, [r7, #32]
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e5      	bne.n	8002efe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d10a      	bne.n	8002f56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fca9 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
 8002f62:	e002      	b.n	8002f6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fd fc23 	bl	80007b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e002      	b.n	8002f74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3730      	adds	r7, #48	; 0x30
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f80:	b0c0      	sub	sp, #256	; 0x100
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	68d9      	ldr	r1, [r3, #12]
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	ea40 0301 	orr.w	r3, r0, r1
 8002fa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fd4:	f021 010c 	bic.w	r1, r1, #12
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff6:	6999      	ldr	r1, [r3, #24]
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	ea40 0301 	orr.w	r3, r0, r1
 8003002:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4b8f      	ldr	r3, [pc, #572]	; (8003248 <UART_SetConfig+0x2cc>)
 800300c:	429a      	cmp	r2, r3
 800300e:	d005      	beq.n	800301c <UART_SetConfig+0xa0>
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b8d      	ldr	r3, [pc, #564]	; (800324c <UART_SetConfig+0x2d0>)
 8003018:	429a      	cmp	r2, r3
 800301a:	d104      	bne.n	8003026 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800301c:	f7ff f90c 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 8003020:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003024:	e003      	b.n	800302e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003026:	f7ff f8f3 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 800302a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003038:	f040 810c 	bne.w	8003254 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800303c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003040:	2200      	movs	r2, #0
 8003042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003046:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800304a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800304e:	4622      	mov	r2, r4
 8003050:	462b      	mov	r3, r5
 8003052:	1891      	adds	r1, r2, r2
 8003054:	65b9      	str	r1, [r7, #88]	; 0x58
 8003056:	415b      	adcs	r3, r3
 8003058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800305a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800305e:	4621      	mov	r1, r4
 8003060:	eb12 0801 	adds.w	r8, r2, r1
 8003064:	4629      	mov	r1, r5
 8003066:	eb43 0901 	adc.w	r9, r3, r1
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307e:	4690      	mov	r8, r2
 8003080:	4699      	mov	r9, r3
 8003082:	4623      	mov	r3, r4
 8003084:	eb18 0303 	adds.w	r3, r8, r3
 8003088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800308c:	462b      	mov	r3, r5
 800308e:	eb49 0303 	adc.w	r3, r9, r3
 8003092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030aa:	460b      	mov	r3, r1
 80030ac:	18db      	adds	r3, r3, r3
 80030ae:	653b      	str	r3, [r7, #80]	; 0x50
 80030b0:	4613      	mov	r3, r2
 80030b2:	eb42 0303 	adc.w	r3, r2, r3
 80030b6:	657b      	str	r3, [r7, #84]	; 0x54
 80030b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030c0:	f7fd f88e 	bl	80001e0 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4b61      	ldr	r3, [pc, #388]	; (8003250 <UART_SetConfig+0x2d4>)
 80030ca:	fba3 2302 	umull	r2, r3, r3, r2
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	011c      	lsls	r4, r3, #4
 80030d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030e4:	4642      	mov	r2, r8
 80030e6:	464b      	mov	r3, r9
 80030e8:	1891      	adds	r1, r2, r2
 80030ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80030ec:	415b      	adcs	r3, r3
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030f4:	4641      	mov	r1, r8
 80030f6:	eb12 0a01 	adds.w	sl, r2, r1
 80030fa:	4649      	mov	r1, r9
 80030fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800310c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003114:	4692      	mov	sl, r2
 8003116:	469b      	mov	fp, r3
 8003118:	4643      	mov	r3, r8
 800311a:	eb1a 0303 	adds.w	r3, sl, r3
 800311e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003122:	464b      	mov	r3, r9
 8003124:	eb4b 0303 	adc.w	r3, fp, r3
 8003128:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003138:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800313c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003140:	460b      	mov	r3, r1
 8003142:	18db      	adds	r3, r3, r3
 8003144:	643b      	str	r3, [r7, #64]	; 0x40
 8003146:	4613      	mov	r3, r2
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	647b      	str	r3, [r7, #68]	; 0x44
 800314e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003152:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003156:	f7fd f843 	bl	80001e0 <__aeabi_uldivmod>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4611      	mov	r1, r2
 8003160:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <UART_SetConfig+0x2d4>)
 8003162:	fba3 2301 	umull	r2, r3, r3, r1
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2264      	movs	r2, #100	; 0x64
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	1acb      	subs	r3, r1, r3
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <UART_SetConfig+0x2d4>)
 8003178:	fba3 2302 	umull	r2, r3, r3, r2
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003184:	441c      	add	r4, r3
 8003186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800318a:	2200      	movs	r2, #0
 800318c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003190:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003194:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003198:	4642      	mov	r2, r8
 800319a:	464b      	mov	r3, r9
 800319c:	1891      	adds	r1, r2, r2
 800319e:	63b9      	str	r1, [r7, #56]	; 0x38
 80031a0:	415b      	adcs	r3, r3
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031a8:	4641      	mov	r1, r8
 80031aa:	1851      	adds	r1, r2, r1
 80031ac:	6339      	str	r1, [r7, #48]	; 0x30
 80031ae:	4649      	mov	r1, r9
 80031b0:	414b      	adcs	r3, r1
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031c0:	4659      	mov	r1, fp
 80031c2:	00cb      	lsls	r3, r1, #3
 80031c4:	4651      	mov	r1, sl
 80031c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ca:	4651      	mov	r1, sl
 80031cc:	00ca      	lsls	r2, r1, #3
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	4642      	mov	r2, r8
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031dc:	464b      	mov	r3, r9
 80031de:	460a      	mov	r2, r1
 80031e0:	eb42 0303 	adc.w	r3, r2, r3
 80031e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031fc:	460b      	mov	r3, r1
 80031fe:	18db      	adds	r3, r3, r3
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
 8003202:	4613      	mov	r3, r2
 8003204:	eb42 0303 	adc.w	r3, r2, r3
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800320e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003212:	f7fc ffe5 	bl	80001e0 <__aeabi_uldivmod>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <UART_SetConfig+0x2d4>)
 800321c:	fba3 1302 	umull	r1, r3, r3, r2
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	2164      	movs	r1, #100	; 0x64
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	3332      	adds	r3, #50	; 0x32
 800322e:	4a08      	ldr	r2, [pc, #32]	; (8003250 <UART_SetConfig+0x2d4>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	f003 0207 	and.w	r2, r3, #7
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4422      	add	r2, r4
 8003242:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003244:	e105      	b.n	8003452 <UART_SetConfig+0x4d6>
 8003246:	bf00      	nop
 8003248:	40011000 	.word	0x40011000
 800324c:	40011400 	.word	0x40011400
 8003250:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003258:	2200      	movs	r2, #0
 800325a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800325e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003262:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003266:	4642      	mov	r2, r8
 8003268:	464b      	mov	r3, r9
 800326a:	1891      	adds	r1, r2, r2
 800326c:	6239      	str	r1, [r7, #32]
 800326e:	415b      	adcs	r3, r3
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003276:	4641      	mov	r1, r8
 8003278:	1854      	adds	r4, r2, r1
 800327a:	4649      	mov	r1, r9
 800327c:	eb43 0501 	adc.w	r5, r3, r1
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	00eb      	lsls	r3, r5, #3
 800328a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328e:	00e2      	lsls	r2, r4, #3
 8003290:	4614      	mov	r4, r2
 8003292:	461d      	mov	r5, r3
 8003294:	4643      	mov	r3, r8
 8003296:	18e3      	adds	r3, r4, r3
 8003298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800329c:	464b      	mov	r3, r9
 800329e:	eb45 0303 	adc.w	r3, r5, r3
 80032a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032c2:	4629      	mov	r1, r5
 80032c4:	008b      	lsls	r3, r1, #2
 80032c6:	4621      	mov	r1, r4
 80032c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032cc:	4621      	mov	r1, r4
 80032ce:	008a      	lsls	r2, r1, #2
 80032d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032d4:	f7fc ff84 	bl	80001e0 <__aeabi_uldivmod>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4b60      	ldr	r3, [pc, #384]	; (8003460 <UART_SetConfig+0x4e4>)
 80032de:	fba3 2302 	umull	r2, r3, r3, r2
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	011c      	lsls	r4, r3, #4
 80032e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032f8:	4642      	mov	r2, r8
 80032fa:	464b      	mov	r3, r9
 80032fc:	1891      	adds	r1, r2, r2
 80032fe:	61b9      	str	r1, [r7, #24]
 8003300:	415b      	adcs	r3, r3
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003308:	4641      	mov	r1, r8
 800330a:	1851      	adds	r1, r2, r1
 800330c:	6139      	str	r1, [r7, #16]
 800330e:	4649      	mov	r1, r9
 8003310:	414b      	adcs	r3, r1
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003320:	4659      	mov	r1, fp
 8003322:	00cb      	lsls	r3, r1, #3
 8003324:	4651      	mov	r1, sl
 8003326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800332a:	4651      	mov	r1, sl
 800332c:	00ca      	lsls	r2, r1, #3
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	4603      	mov	r3, r0
 8003334:	4642      	mov	r2, r8
 8003336:	189b      	adds	r3, r3, r2
 8003338:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800333c:	464b      	mov	r3, r9
 800333e:	460a      	mov	r2, r1
 8003340:	eb42 0303 	adc.w	r3, r2, r3
 8003344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	67bb      	str	r3, [r7, #120]	; 0x78
 8003352:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003360:	4649      	mov	r1, r9
 8003362:	008b      	lsls	r3, r1, #2
 8003364:	4641      	mov	r1, r8
 8003366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800336a:	4641      	mov	r1, r8
 800336c:	008a      	lsls	r2, r1, #2
 800336e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003372:	f7fc ff35 	bl	80001e0 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4b39      	ldr	r3, [pc, #228]	; (8003460 <UART_SetConfig+0x4e4>)
 800337c:	fba3 1302 	umull	r1, r3, r3, r2
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	2164      	movs	r1, #100	; 0x64
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	3332      	adds	r3, #50	; 0x32
 800338e:	4a34      	ldr	r2, [pc, #208]	; (8003460 <UART_SetConfig+0x4e4>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339a:	441c      	add	r4, r3
 800339c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a0:	2200      	movs	r2, #0
 80033a2:	673b      	str	r3, [r7, #112]	; 0x70
 80033a4:	677a      	str	r2, [r7, #116]	; 0x74
 80033a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033aa:	4642      	mov	r2, r8
 80033ac:	464b      	mov	r3, r9
 80033ae:	1891      	adds	r1, r2, r2
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	415b      	adcs	r3, r3
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ba:	4641      	mov	r1, r8
 80033bc:	1851      	adds	r1, r2, r1
 80033be:	6039      	str	r1, [r7, #0]
 80033c0:	4649      	mov	r1, r9
 80033c2:	414b      	adcs	r3, r1
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033d2:	4659      	mov	r1, fp
 80033d4:	00cb      	lsls	r3, r1, #3
 80033d6:	4651      	mov	r1, sl
 80033d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033dc:	4651      	mov	r1, sl
 80033de:	00ca      	lsls	r2, r1, #3
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	4603      	mov	r3, r0
 80033e6:	4642      	mov	r2, r8
 80033e8:	189b      	adds	r3, r3, r2
 80033ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ec:	464b      	mov	r3, r9
 80033ee:	460a      	mov	r2, r1
 80033f0:	eb42 0303 	adc.w	r3, r2, r3
 80033f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003400:	667a      	str	r2, [r7, #100]	; 0x64
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800340e:	4649      	mov	r1, r9
 8003410:	008b      	lsls	r3, r1, #2
 8003412:	4641      	mov	r1, r8
 8003414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003418:	4641      	mov	r1, r8
 800341a:	008a      	lsls	r2, r1, #2
 800341c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003420:	f7fc fede 	bl	80001e0 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <UART_SetConfig+0x4e4>)
 800342a:	fba3 1302 	umull	r1, r3, r3, r2
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2164      	movs	r1, #100	; 0x64
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	3332      	adds	r3, #50	; 0x32
 800343c:	4a08      	ldr	r2, [pc, #32]	; (8003460 <UART_SetConfig+0x4e4>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	f003 020f 	and.w	r2, r3, #15
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4422      	add	r2, r4
 8003450:	609a      	str	r2, [r3, #8]
}
 8003452:	bf00      	nop
 8003454:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003458:	46bd      	mov	sp, r7
 800345a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345e:	bf00      	nop
 8003460:	51eb851f 	.word	0x51eb851f

08003464 <__NVIC_SetPriority>:
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	490c      	ldr	r1, [pc, #48]	; (80034b0 <__NVIC_SetPriority+0x4c>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800348c:	e00a      	b.n	80034a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4908      	ldr	r1, [pc, #32]	; (80034b4 <__NVIC_SetPriority+0x50>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3b04      	subs	r3, #4
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	440b      	add	r3, r1
 80034a2:	761a      	strb	r2, [r3, #24]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80034bc:	2100      	movs	r1, #0
 80034be:	f06f 0004 	mvn.w	r0, #4
 80034c2:	f7ff ffcf 	bl	8003464 <__NVIC_SetPriority>
#endif
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d2:	f3ef 8305 	mrs	r3, IPSR
 80034d6:	603b      	str	r3, [r7, #0]
  return(result);
 80034d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80034de:	f06f 0305 	mvn.w	r3, #5
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	e00c      	b.n	8003500 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <osKernelInitialize+0x44>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <osKernelInitialize+0x44>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	607b      	str	r3, [r7, #4]
 80034f8:	e002      	b.n	8003500 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003500:	687b      	ldr	r3, [r7, #4]
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000178 	.word	0x20000178

08003514 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800351a:	f3ef 8305 	mrs	r3, IPSR
 800351e:	603b      	str	r3, [r7, #0]
  return(result);
 8003520:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003526:	f06f 0305 	mvn.w	r3, #5
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	e010      	b.n	8003550 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <osKernelStart+0x48>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d109      	bne.n	800354a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003536:	f7ff ffbf 	bl	80034b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <osKernelStart+0x48>)
 800353c:	2202      	movs	r2, #2
 800353e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003540:	f001 f866 	bl	8004610 <vTaskStartScheduler>
      stat = osOK;
 8003544:	2300      	movs	r3, #0
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	e002      	b.n	8003550 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800354a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800354e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003550:	687b      	ldr	r3, [r7, #4]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000178 	.word	0x20000178

08003560 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b08e      	sub	sp, #56	; 0x38
 8003564:	af04      	add	r7, sp, #16
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800356c:	2300      	movs	r3, #0
 800356e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003570:	f3ef 8305 	mrs	r3, IPSR
 8003574:	617b      	str	r3, [r7, #20]
  return(result);
 8003576:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003578:	2b00      	cmp	r3, #0
 800357a:	d17e      	bne.n	800367a <osThreadNew+0x11a>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d07b      	beq.n	800367a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003586:	2318      	movs	r3, #24
 8003588:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003592:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d045      	beq.n	8003626 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <osThreadNew+0x48>
        name = attr->name;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <osThreadNew+0x6e>
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b38      	cmp	r3, #56	; 0x38
 80035c0:	d805      	bhi.n	80035ce <osThreadNew+0x6e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <osThreadNew+0x72>
        return (NULL);
 80035ce:	2300      	movs	r3, #0
 80035d0:	e054      	b.n	800367c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00e      	beq.n	8003608 <osThreadNew+0xa8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b5b      	cmp	r3, #91	; 0x5b
 80035f0:	d90a      	bls.n	8003608 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d006      	beq.n	8003608 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <osThreadNew+0xa8>
        mem = 1;
 8003602:	2301      	movs	r3, #1
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	e010      	b.n	800362a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10c      	bne.n	800362a <osThreadNew+0xca>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d108      	bne.n	800362a <osThreadNew+0xca>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <osThreadNew+0xca>
          mem = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	e001      	b.n	800362a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d110      	bne.n	8003652 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003638:	9202      	str	r2, [sp, #8]
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	6a3a      	ldr	r2, [r7, #32]
 8003644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fe0c 	bl	8004264 <xTaskCreateStatic>
 800364c:	4603      	mov	r3, r0
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	e013      	b.n	800367a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d110      	bne.n	800367a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	b29a      	uxth	r2, r3
 800365c:	f107 0310 	add.w	r3, r7, #16
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fe57 	bl	800431e <xTaskCreate>
 8003670:	4603      	mov	r3, r0
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <osThreadNew+0x11a>
            hTask = NULL;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800367a:	693b      	ldr	r3, [r7, #16]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3728      	adds	r7, #40	; 0x28
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800368c:	f3ef 8305 	mrs	r3, IPSR
 8003690:	60bb      	str	r3, [r7, #8]
  return(result);
 8003692:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <osDelay+0x1c>
    stat = osErrorISR;
 8003698:	f06f 0305 	mvn.w	r3, #5
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e007      	b.n	80036b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 ff7c 	bl	80045a8 <vTaskDelay>
    }
  }

  return (stat);
 80036b0:	68fb      	ldr	r3, [r7, #12]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80036cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4a06      	ldr	r2, [pc, #24]	; (80036ec <vApplicationGetIdleTaskMemory+0x30>)
 80036d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	601a      	str	r2, [r3, #0]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	2000017c 	.word	0x2000017c
 80036ec:	200001d8 	.word	0x200001d8

080036f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4a07      	ldr	r2, [pc, #28]	; (800371c <vApplicationGetTimerTaskMemory+0x2c>)
 8003700:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4a06      	ldr	r2, [pc, #24]	; (8003720 <vApplicationGetTimerTaskMemory+0x30>)
 8003706:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800370e:	601a      	str	r2, [r3, #0]
}
 8003710:	bf00      	nop
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	200003d8 	.word	0x200003d8
 8003720:	20000434 	.word	0x20000434

08003724 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f103 0208 	add.w	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800373c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f103 0208 	add.w	r2, r3, #8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f103 0208 	add.w	r2, r3, #8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	601a      	str	r2, [r3, #0]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037dc:	d103      	bne.n	80037e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e00c      	b.n	8003800 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3308      	adds	r3, #8
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	e002      	b.n	80037f4 <vListInsert+0x2e>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d2f6      	bcs.n	80037ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	601a      	str	r2, [r3, #0]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6892      	ldr	r2, [r2, #8]
 800384e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6852      	ldr	r2, [r2, #4]
 8003858:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	429a      	cmp	r2, r3
 8003862:	d103      	bne.n	800386c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	1e5a      	subs	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038b2:	bf00      	nop
 80038b4:	e7fe      	b.n	80038b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038b6:	f002 f84d 	bl	8005954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	68f9      	ldr	r1, [r7, #12]
 80038c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	441a      	add	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	3b01      	subs	r3, #1
 80038e8:	68f9      	ldr	r1, [r7, #12]
 80038ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	441a      	add	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	22ff      	movs	r2, #255	; 0xff
 80038fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	22ff      	movs	r2, #255	; 0xff
 8003902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d114      	bne.n	8003936 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01a      	beq.n	800394a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3310      	adds	r3, #16
 8003918:	4618      	mov	r0, r3
 800391a:	f001 f903 	bl	8004b24 <xTaskRemoveFromEventList>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d012      	beq.n	800394a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <xQueueGenericReset+0xcc>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	e009      	b.n	800394a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3310      	adds	r3, #16
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fef2 	bl	8003724 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3324      	adds	r3, #36	; 0x24
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff feed 	bl	8003724 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800394a:	f002 f833 	bl	80059b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800394e:	2301      	movs	r3, #1
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08e      	sub	sp, #56	; 0x38
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <xQueueGenericCreateStatic+0x52>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <xQueueGenericCreateStatic+0x56>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <xQueueGenericCreateStatic+0x58>
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	623b      	str	r3, [r7, #32]
}
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <xQueueGenericCreateStatic+0x7e>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <xQueueGenericCreateStatic+0x82>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <xQueueGenericCreateStatic+0x84>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61fb      	str	r3, [r7, #28]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039fa:	2350      	movs	r3, #80	; 0x50
 80039fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b50      	cmp	r3, #80	; 0x50
 8003a02:	d00a      	beq.n	8003a1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	61bb      	str	r3, [r7, #24]
}
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00d      	beq.n	8003a42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f805 	bl	8003a4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3730      	adds	r7, #48	; 0x30
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e002      	b.n	8003a6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	69b8      	ldr	r0, [r7, #24]
 8003a7e:	f7ff ff05 	bl	800388c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08e      	sub	sp, #56	; 0x38
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <xQueueGenericSend+0x32>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <xQueueGenericSend+0x40>
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <xQueueGenericSend+0x44>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <xQueueGenericSend+0x46>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <xQueueGenericSend+0x60>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003af0:	bf00      	nop
 8003af2:	e7fe      	b.n	8003af2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d103      	bne.n	8003b02 <xQueueGenericSend+0x6e>
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <xQueueGenericSend+0x72>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <xQueueGenericSend+0x74>
 8003b06:	2300      	movs	r3, #0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <xQueueGenericSend+0x8e>
	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	623b      	str	r3, [r7, #32]
}
 8003b1e:	bf00      	nop
 8003b20:	e7fe      	b.n	8003b20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b22:	f001 f9bd 	bl	8004ea0 <xTaskGetSchedulerState>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <xQueueGenericSend+0x9e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <xQueueGenericSend+0xa2>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <xQueueGenericSend+0xa4>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <xQueueGenericSend+0xbe>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	61fb      	str	r3, [r7, #28]
}
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b52:	f001 feff 	bl	8005954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <xQueueGenericSend+0xd4>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d129      	bne.n	8003bbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b6e:	f000 fa0b 	bl	8003f88 <prvCopyDataToQueue>
 8003b72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d010      	beq.n	8003b9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	3324      	adds	r3, #36	; 0x24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 ffcf 	bl	8004b24 <xTaskRemoveFromEventList>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b8c:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <xQueueGenericSend+0x1f8>)
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	e00a      	b.n	8003bb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ba4:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <xQueueGenericSend+0x1f8>)
 8003ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bb4:	f001 fefe 	bl	80059b4 <vPortExitCritical>
				return pdPASS;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e063      	b.n	8003c84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bc2:	f001 fef7 	bl	80059b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e05c      	b.n	8003c84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 f809 	bl	8004bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bde:	f001 fee9 	bl	80059b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003be2:	f000 fd7b 	bl	80046dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003be6:	f001 feb5 	bl	8005954 <vPortEnterCritical>
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf0:	b25b      	sxtb	r3, r3
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf6:	d103      	bne.n	8003c00 <xQueueGenericSend+0x16c>
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c06:	b25b      	sxtb	r3, r3
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c0c:	d103      	bne.n	8003c16 <xQueueGenericSend+0x182>
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c16:	f001 fecd 	bl	80059b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c1a:	1d3a      	adds	r2, r7, #4
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fff8 	bl	8004c18 <xTaskCheckForTimeOut>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d124      	bne.n	8003c78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c30:	f000 faa2 	bl	8004178 <prvIsQueueFull>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d018      	beq.n	8003c6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	3310      	adds	r3, #16
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 ff1e 	bl	8004a84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4a:	f000 fa2d 	bl	80040a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c4e:	f000 fd53 	bl	80046f8 <xTaskResumeAll>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f47f af7c 	bne.w	8003b52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <xQueueGenericSend+0x1f8>)
 8003c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	e772      	b.n	8003b52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c6e:	f000 fa1b 	bl	80040a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c72:	f000 fd41 	bl	80046f8 <xTaskResumeAll>
 8003c76:	e76c      	b.n	8003b52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c7a:	f000 fa15 	bl	80040a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c7e:	f000 fd3b 	bl	80046f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3738      	adds	r7, #56	; 0x38
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b090      	sub	sp, #64	; 0x40
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cba:	bf00      	nop
 8003cbc:	e7fe      	b.n	8003cbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d103      	bne.n	8003ccc <xQueueGenericSendFromISR+0x3c>
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <xQueueGenericSendFromISR+0x40>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <xQueueGenericSendFromISR+0x42>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d103      	bne.n	8003cfa <xQueueGenericSendFromISR+0x6a>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <xQueueGenericSendFromISR+0x6e>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <xQueueGenericSendFromISR+0x70>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	623b      	str	r3, [r7, #32]
}
 8003d16:	bf00      	nop
 8003d18:	e7fe      	b.n	8003d18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d1a:	f001 fefd 	bl	8005b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d1e:	f3ef 8211 	mrs	r2, BASEPRI
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	61fa      	str	r2, [r7, #28]
 8003d34:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <xQueueGenericSendFromISR+0xbc>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d12f      	bne.n	8003dac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d62:	f000 f911 	bl	8003f88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d6e:	d112      	bne.n	8003d96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d016      	beq.n	8003da6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	3324      	adds	r3, #36	; 0x24
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fed1 	bl	8004b24 <xTaskRemoveFromEventList>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00e      	beq.n	8003da6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	e007      	b.n	8003da6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	b25a      	sxtb	r2, r3
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003da6:	2301      	movs	r3, #1
 8003da8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003daa:	e001      	b.n	8003db0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003dba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3740      	adds	r7, #64	; 0x40
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	; 0x30
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <xQueueReceive+0x30>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	623b      	str	r3, [r7, #32]
}
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <xQueueReceive+0x3e>
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <xQueueReceive+0x42>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <xQueueReceive+0x44>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xQueueReceive+0x5e>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	61fb      	str	r3, [r7, #28]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e26:	f001 f83b 	bl	8004ea0 <xTaskGetSchedulerState>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <xQueueReceive+0x6e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <xQueueReceive+0x72>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <xQueueReceive+0x74>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <xQueueReceive+0x8e>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	61bb      	str	r3, [r7, #24]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e56:	f001 fd7d 	bl	8005954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01f      	beq.n	8003ea6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e6a:	f000 f8f7 	bl	800405c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00f      	beq.n	8003e9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	3310      	adds	r3, #16
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fe4e 	bl	8004b24 <xTaskRemoveFromEventList>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <xQueueReceive+0x1bc>)
 8003e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e9e:	f001 fd89 	bl	80059b4 <vPortExitCritical>
				return pdPASS;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e069      	b.n	8003f7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eac:	f001 fd82 	bl	80059b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e062      	b.n	8003f7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003eba:	f107 0310 	add.w	r3, r7, #16
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fe94 	bl	8004bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ec8:	f001 fd74 	bl	80059b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ecc:	f000 fc06 	bl	80046dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ed0:	f001 fd40 	bl	8005954 <vPortEnterCritical>
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee0:	d103      	bne.n	8003eea <xQueueReceive+0x122>
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ef0:	b25b      	sxtb	r3, r3
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef6:	d103      	bne.n	8003f00 <xQueueReceive+0x138>
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f00:	f001 fd58 	bl	80059b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f04:	1d3a      	adds	r2, r7, #4
 8003f06:	f107 0310 	add.w	r3, r7, #16
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fe83 	bl	8004c18 <xTaskCheckForTimeOut>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d123      	bne.n	8003f60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f1a:	f000 f917 	bl	800414c <prvIsQueueEmpty>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d017      	beq.n	8003f54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	3324      	adds	r3, #36	; 0x24
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fda9 	bl	8004a84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f34:	f000 f8b8 	bl	80040a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f38:	f000 fbde 	bl	80046f8 <xTaskResumeAll>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d189      	bne.n	8003e56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <xQueueReceive+0x1bc>)
 8003f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	e780      	b.n	8003e56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f56:	f000 f8a7 	bl	80040a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f5a:	f000 fbcd 	bl	80046f8 <xTaskResumeAll>
 8003f5e:	e77a      	b.n	8003e56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f62:	f000 f8a1 	bl	80040a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f66:	f000 fbc7 	bl	80046f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f6c:	f000 f8ee 	bl	800414c <prvIsQueueEmpty>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f43f af6f 	beq.w	8003e56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3730      	adds	r7, #48	; 0x30
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10d      	bne.n	8003fc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d14d      	bne.n	800404a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 ff92 	bl	8004edc <xTaskPriorityDisinherit>
 8003fb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	e043      	b.n	800404a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d119      	bne.n	8003ffc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6858      	ldr	r0, [r3, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	68b9      	ldr	r1, [r7, #8]
 8003fd4:	f001 ffee 	bl	8005fb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	441a      	add	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d32b      	bcc.n	800404a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	e026      	b.n	800404a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68d8      	ldr	r0, [r3, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	461a      	mov	r2, r3
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	f001 ffd4 	bl	8005fb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	425b      	negs	r3, r3
 8004016:	441a      	add	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d207      	bcs.n	8004038 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	425b      	negs	r3, r3
 8004032:	441a      	add	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d105      	bne.n	800404a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	3b01      	subs	r3, #1
 8004048:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004052:	697b      	ldr	r3, [r7, #20]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d018      	beq.n	80040a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	441a      	add	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	429a      	cmp	r2, r3
 8004086:	d303      	bcc.n	8004090 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68d9      	ldr	r1, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	461a      	mov	r2, r3
 800409a:	6838      	ldr	r0, [r7, #0]
 800409c:	f001 ff8a 	bl	8005fb4 <memcpy>
	}
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040b0:	f001 fc50 	bl	8005954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040bc:	e011      	b.n	80040e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d012      	beq.n	80040ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3324      	adds	r3, #36	; 0x24
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fd2a 	bl	8004b24 <xTaskRemoveFromEventList>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040d6:	f000 fe01 	bl	8004cdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	3b01      	subs	r3, #1
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	dce9      	bgt.n	80040be <prvUnlockQueue+0x16>
 80040ea:	e000      	b.n	80040ee <prvUnlockQueue+0x46>
					break;
 80040ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	22ff      	movs	r2, #255	; 0xff
 80040f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040f6:	f001 fc5d 	bl	80059b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040fa:	f001 fc2b 	bl	8005954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004104:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004106:	e011      	b.n	800412c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d012      	beq.n	8004136 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3310      	adds	r3, #16
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fd05 	bl	8004b24 <xTaskRemoveFromEventList>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004120:	f000 fddc 	bl	8004cdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004124:	7bbb      	ldrb	r3, [r7, #14]
 8004126:	3b01      	subs	r3, #1
 8004128:	b2db      	uxtb	r3, r3
 800412a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800412c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004130:	2b00      	cmp	r3, #0
 8004132:	dce9      	bgt.n	8004108 <prvUnlockQueue+0x60>
 8004134:	e000      	b.n	8004138 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004136:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	22ff      	movs	r2, #255	; 0xff
 800413c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004140:	f001 fc38 	bl	80059b4 <vPortExitCritical>
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004154:	f001 fbfe 	bl	8005954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	2b00      	cmp	r3, #0
 800415e:	d102      	bne.n	8004166 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004160:	2301      	movs	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	e001      	b.n	800416a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800416a:	f001 fc23 	bl	80059b4 <vPortExitCritical>

	return xReturn;
 800416e:	68fb      	ldr	r3, [r7, #12]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004180:	f001 fbe8 	bl	8005954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418c:	429a      	cmp	r2, r3
 800418e:	d102      	bne.n	8004196 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004190:	2301      	movs	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e001      	b.n	800419a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800419a:	f001 fc0b 	bl	80059b4 <vPortExitCritical>

	return xReturn;
 800419e:	68fb      	ldr	r3, [r7, #12]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e014      	b.n	80041e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041b8:	4a0f      	ldr	r2, [pc, #60]	; (80041f8 <vQueueAddToRegistry+0x50>)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10b      	bne.n	80041dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041c4:	490c      	ldr	r1, [pc, #48]	; (80041f8 <vQueueAddToRegistry+0x50>)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041ce:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <vQueueAddToRegistry+0x50>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041da:	e006      	b.n	80041ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3301      	adds	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b07      	cmp	r3, #7
 80041e6:	d9e7      	bls.n	80041b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000834 	.word	0x20000834

080041fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800420c:	f001 fba2 	bl	8005954 <vPortEnterCritical>
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004216:	b25b      	sxtb	r3, r3
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800421c:	d103      	bne.n	8004226 <vQueueWaitForMessageRestricted+0x2a>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800422c:	b25b      	sxtb	r3, r3
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004232:	d103      	bne.n	800423c <vQueueWaitForMessageRestricted+0x40>
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800423c:	f001 fbba 	bl	80059b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3324      	adds	r3, #36	; 0x24
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fc3b 	bl	8004acc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004256:	6978      	ldr	r0, [r7, #20]
 8004258:	f7ff ff26 	bl	80040a8 <prvUnlockQueue>
	}
 800425c:	bf00      	nop
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08e      	sub	sp, #56	; 0x38
 8004268:	af04      	add	r7, sp, #16
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	623b      	str	r3, [r7, #32]
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800428e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <xTaskCreateStatic+0x46>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	61fb      	str	r3, [r7, #28]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042aa:	235c      	movs	r3, #92	; 0x5c
 80042ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b5c      	cmp	r3, #92	; 0x5c
 80042b2:	d00a      	beq.n	80042ca <xTaskCreateStatic+0x66>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	61bb      	str	r3, [r7, #24]
}
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01e      	beq.n	8004310 <xTaskCreateStatic+0xac>
 80042d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042ea:	2300      	movs	r3, #0
 80042ec:	9303      	str	r3, [sp, #12]
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	9302      	str	r3, [sp, #8]
 80042f2:	f107 0314 	add.w	r3, r7, #20
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f850 	bl	80043a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800430a:	f000 f8dd 	bl	80044c8 <prvAddNewTaskToReadyList>
 800430e:	e001      	b.n	8004314 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004314:	697b      	ldr	r3, [r7, #20]
	}
 8004316:	4618      	mov	r0, r3
 8004318:	3728      	adds	r7, #40	; 0x28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800431e:	b580      	push	{r7, lr}
 8004320:	b08c      	sub	sp, #48	; 0x30
 8004322:	af04      	add	r7, sp, #16
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	4613      	mov	r3, r2
 800432c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4618      	mov	r0, r3
 8004334:	f001 fc30 	bl	8005b98 <pvPortMalloc>
 8004338:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00e      	beq.n	800435e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004340:	205c      	movs	r0, #92	; 0x5c
 8004342:	f001 fc29 	bl	8005b98 <pvPortMalloc>
 8004346:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
 8004354:	e005      	b.n	8004362 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004356:	6978      	ldr	r0, [r7, #20]
 8004358:	f001 fcea 	bl	8005d30 <vPortFree>
 800435c:	e001      	b.n	8004362 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d017      	beq.n	8004398 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004370:	88fa      	ldrh	r2, [r7, #6]
 8004372:	2300      	movs	r3, #0
 8004374:	9303      	str	r3, [sp, #12]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	9302      	str	r3, [sp, #8]
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f80e 	bl	80043a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800438c:	69f8      	ldr	r0, [r7, #28]
 800438e:	f000 f89b 	bl	80044c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004392:	2301      	movs	r3, #1
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	e002      	b.n	800439e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800439c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800439e:	69bb      	ldr	r3, [r7, #24]
	}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	461a      	mov	r2, r3
 80043c0:	21a5      	movs	r1, #165	; 0xa5
 80043c2:	f001 fe05 	bl	8005fd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043d0:	3b01      	subs	r3, #1
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	f023 0307 	bic.w	r3, r3, #7
 80043de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <prvInitialiseNewTask+0x58>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	617b      	str	r3, [r7, #20]
}
 80043fc:	bf00      	nop
 80043fe:	e7fe      	b.n	80043fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01f      	beq.n	8004446 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	e012      	b.n	8004432 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	7819      	ldrb	r1, [r3, #0]
 8004414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	3334      	adds	r3, #52	; 0x34
 800441c:	460a      	mov	r2, r1
 800441e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d006      	beq.n	800443a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	3301      	adds	r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2b0f      	cmp	r3, #15
 8004436:	d9e9      	bls.n	800440c <prvInitialiseNewTask+0x64>
 8004438:	e000      	b.n	800443c <prvInitialiseNewTask+0x94>
			{
				break;
 800443a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004444:	e003      	b.n	800444e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	2b37      	cmp	r3, #55	; 0x37
 8004452:	d901      	bls.n	8004458 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004454:	2337      	movs	r3, #55	; 0x37
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004462:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	2200      	movs	r2, #0
 8004468:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	3304      	adds	r3, #4
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff f978 	bl	8003764 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	3318      	adds	r3, #24
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff f973 	bl	8003764 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004482:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004492:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	2200      	movs	r2, #0
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	68f9      	ldr	r1, [r7, #12]
 80044a6:	69b8      	ldr	r0, [r7, #24]
 80044a8:	f001 f928 	bl	80056fc <pxPortInitialiseStack>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044be:	bf00      	nop
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044d0:	f001 fa40 	bl	8005954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044d4:	4b2d      	ldr	r3, [pc, #180]	; (800458c <prvAddNewTaskToReadyList+0xc4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	4a2c      	ldr	r2, [pc, #176]	; (800458c <prvAddNewTaskToReadyList+0xc4>)
 80044dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044de:	4b2c      	ldr	r3, [pc, #176]	; (8004590 <prvAddNewTaskToReadyList+0xc8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044e6:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <prvAddNewTaskToReadyList+0xc8>)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <prvAddNewTaskToReadyList+0xc4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d110      	bne.n	8004516 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044f4:	f000 fc16 	bl	8004d24 <prvInitialiseTaskLists>
 80044f8:	e00d      	b.n	8004516 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044fa:	4b26      	ldr	r3, [pc, #152]	; (8004594 <prvAddNewTaskToReadyList+0xcc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <prvAddNewTaskToReadyList+0xc8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	429a      	cmp	r2, r3
 800450e:	d802      	bhi.n	8004516 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004510:	4a1f      	ldr	r2, [pc, #124]	; (8004590 <prvAddNewTaskToReadyList+0xc8>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004516:	4b20      	ldr	r3, [pc, #128]	; (8004598 <prvAddNewTaskToReadyList+0xd0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	4a1e      	ldr	r2, [pc, #120]	; (8004598 <prvAddNewTaskToReadyList+0xd0>)
 800451e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004520:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <prvAddNewTaskToReadyList+0xd0>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <prvAddNewTaskToReadyList+0xd4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d903      	bls.n	800453c <prvAddNewTaskToReadyList+0x74>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	4a18      	ldr	r2, [pc, #96]	; (800459c <prvAddNewTaskToReadyList+0xd4>)
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <prvAddNewTaskToReadyList+0xd8>)
 800454a:	441a      	add	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f7ff f913 	bl	800377e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004558:	f001 fa2c 	bl	80059b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800455c:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <prvAddNewTaskToReadyList+0xcc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00e      	beq.n	8004582 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <prvAddNewTaskToReadyList+0xc8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	429a      	cmp	r2, r3
 8004570:	d207      	bcs.n	8004582 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <prvAddNewTaskToReadyList+0xdc>)
 8004574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000d48 	.word	0x20000d48
 8004590:	20000874 	.word	0x20000874
 8004594:	20000d54 	.word	0x20000d54
 8004598:	20000d64 	.word	0x20000d64
 800459c:	20000d50 	.word	0x20000d50
 80045a0:	20000878 	.word	0x20000878
 80045a4:	e000ed04 	.word	0xe000ed04

080045a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d017      	beq.n	80045ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <vTaskDelay+0x60>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <vTaskDelay+0x30>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60bb      	str	r3, [r7, #8]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045d8:	f000 f880 	bl	80046dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045dc:	2100      	movs	r1, #0
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fcea 	bl	8004fb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045e4:	f000 f888 	bl	80046f8 <xTaskResumeAll>
 80045e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <vTaskDelay+0x64>)
 80045f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000d70 	.word	0x20000d70
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800461e:	463a      	mov	r2, r7
 8004620:	1d39      	adds	r1, r7, #4
 8004622:	f107 0308 	add.w	r3, r7, #8
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff f848 	bl	80036bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800462c:	6839      	ldr	r1, [r7, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	9202      	str	r2, [sp, #8]
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	2300      	movs	r3, #0
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	460a      	mov	r2, r1
 800463e:	4921      	ldr	r1, [pc, #132]	; (80046c4 <vTaskStartScheduler+0xb4>)
 8004640:	4821      	ldr	r0, [pc, #132]	; (80046c8 <vTaskStartScheduler+0xb8>)
 8004642:	f7ff fe0f 	bl	8004264 <xTaskCreateStatic>
 8004646:	4603      	mov	r3, r0
 8004648:	4a20      	ldr	r2, [pc, #128]	; (80046cc <vTaskStartScheduler+0xbc>)
 800464a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800464c:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <vTaskStartScheduler+0xbc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004654:	2301      	movs	r3, #1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e001      	b.n	800465e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d102      	bne.n	800466a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004664:	f000 fcfc 	bl	8005060 <xTimerCreateTimerTask>
 8004668:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d116      	bne.n	800469e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	613b      	str	r3, [r7, #16]
}
 8004682:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004684:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <vTaskStartScheduler+0xc0>)
 8004686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800468a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800468c:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <vTaskStartScheduler+0xc4>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004692:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <vTaskStartScheduler+0xc8>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004698:	f001 f8ba 	bl	8005810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800469c:	e00e      	b.n	80046bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a4:	d10a      	bne.n	80046bc <vTaskStartScheduler+0xac>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60fb      	str	r3, [r7, #12]
}
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <vTaskStartScheduler+0xaa>
}
 80046bc:	bf00      	nop
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	08006004 	.word	0x08006004
 80046c8:	08004cf5 	.word	0x08004cf5
 80046cc:	20000d6c 	.word	0x20000d6c
 80046d0:	20000d68 	.word	0x20000d68
 80046d4:	20000d54 	.word	0x20000d54
 80046d8:	20000d4c 	.word	0x20000d4c

080046dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <vTaskSuspendAll+0x18>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3301      	adds	r3, #1
 80046e6:	4a03      	ldr	r2, [pc, #12]	; (80046f4 <vTaskSuspendAll+0x18>)
 80046e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046ea:	bf00      	nop
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	20000d70 	.word	0x20000d70

080046f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004706:	4b42      	ldr	r3, [pc, #264]	; (8004810 <xTaskResumeAll+0x118>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <xTaskResumeAll+0x2c>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	603b      	str	r3, [r7, #0]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004724:	f001 f916 	bl	8005954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004728:	4b39      	ldr	r3, [pc, #228]	; (8004810 <xTaskResumeAll+0x118>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3b01      	subs	r3, #1
 800472e:	4a38      	ldr	r2, [pc, #224]	; (8004810 <xTaskResumeAll+0x118>)
 8004730:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004732:	4b37      	ldr	r3, [pc, #220]	; (8004810 <xTaskResumeAll+0x118>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d162      	bne.n	8004800 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800473a:	4b36      	ldr	r3, [pc, #216]	; (8004814 <xTaskResumeAll+0x11c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d05e      	beq.n	8004800 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004742:	e02f      	b.n	80047a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004744:	4b34      	ldr	r3, [pc, #208]	; (8004818 <xTaskResumeAll+0x120>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3318      	adds	r3, #24
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff f871 	bl	8003838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3304      	adds	r3, #4
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff f86c 	bl	8003838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	4b2d      	ldr	r3, [pc, #180]	; (800481c <xTaskResumeAll+0x124>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d903      	bls.n	8004774 <xTaskResumeAll+0x7c>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	4a2a      	ldr	r2, [pc, #168]	; (800481c <xTaskResumeAll+0x124>)
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4a27      	ldr	r2, [pc, #156]	; (8004820 <xTaskResumeAll+0x128>)
 8004782:	441a      	add	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f7fe fff7 	bl	800377e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	4b23      	ldr	r3, [pc, #140]	; (8004824 <xTaskResumeAll+0x12c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	429a      	cmp	r2, r3
 800479c:	d302      	bcc.n	80047a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800479e:	4b22      	ldr	r3, [pc, #136]	; (8004828 <xTaskResumeAll+0x130>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047a4:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <xTaskResumeAll+0x120>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1cb      	bne.n	8004744 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047b2:	f000 fb55 	bl	8004e60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047b6:	4b1d      	ldr	r3, [pc, #116]	; (800482c <xTaskResumeAll+0x134>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d010      	beq.n	80047e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047c2:	f000 f847 	bl	8004854 <xTaskIncrementTick>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80047cc:	4b16      	ldr	r3, [pc, #88]	; (8004828 <xTaskResumeAll+0x130>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f1      	bne.n	80047c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <xTaskResumeAll+0x134>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047e4:	4b10      	ldr	r3, [pc, #64]	; (8004828 <xTaskResumeAll+0x130>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047ec:	2301      	movs	r3, #1
 80047ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <xTaskResumeAll+0x138>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004800:	f001 f8d8 	bl	80059b4 <vPortExitCritical>

	return xAlreadyYielded;
 8004804:	68bb      	ldr	r3, [r7, #8]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000d70 	.word	0x20000d70
 8004814:	20000d48 	.word	0x20000d48
 8004818:	20000d08 	.word	0x20000d08
 800481c:	20000d50 	.word	0x20000d50
 8004820:	20000878 	.word	0x20000878
 8004824:	20000874 	.word	0x20000874
 8004828:	20000d5c 	.word	0x20000d5c
 800482c:	20000d58 	.word	0x20000d58
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <xTaskGetTickCount+0x1c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004840:	687b      	ldr	r3, [r7, #4]
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000d4c 	.word	0x20000d4c

08004854 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800485e:	4b4f      	ldr	r3, [pc, #316]	; (800499c <xTaskIncrementTick+0x148>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 808f 	bne.w	8004986 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004868:	4b4d      	ldr	r3, [pc, #308]	; (80049a0 <xTaskIncrementTick+0x14c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004870:	4a4b      	ldr	r2, [pc, #300]	; (80049a0 <xTaskIncrementTick+0x14c>)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d120      	bne.n	80048be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800487c:	4b49      	ldr	r3, [pc, #292]	; (80049a4 <xTaskIncrementTick+0x150>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <xTaskIncrementTick+0x48>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	603b      	str	r3, [r7, #0]
}
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <xTaskIncrementTick+0x46>
 800489c:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <xTaskIncrementTick+0x150>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	4b41      	ldr	r3, [pc, #260]	; (80049a8 <xTaskIncrementTick+0x154>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a3f      	ldr	r2, [pc, #252]	; (80049a4 <xTaskIncrementTick+0x150>)
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	4a3f      	ldr	r2, [pc, #252]	; (80049a8 <xTaskIncrementTick+0x154>)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4b3e      	ldr	r3, [pc, #248]	; (80049ac <xTaskIncrementTick+0x158>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3301      	adds	r3, #1
 80048b6:	4a3d      	ldr	r2, [pc, #244]	; (80049ac <xTaskIncrementTick+0x158>)
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	f000 fad1 	bl	8004e60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048be:	4b3c      	ldr	r3, [pc, #240]	; (80049b0 <xTaskIncrementTick+0x15c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d349      	bcc.n	800495c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048c8:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <xTaskIncrementTick+0x150>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d2:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <xTaskIncrementTick+0x15c>)
 80048d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048d8:	601a      	str	r2, [r3, #0]
					break;
 80048da:	e03f      	b.n	800495c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048dc:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <xTaskIncrementTick+0x150>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d203      	bcs.n	80048fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048f4:	4a2e      	ldr	r2, [pc, #184]	; (80049b0 <xTaskIncrementTick+0x15c>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048fa:	e02f      	b.n	800495c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	3304      	adds	r3, #4
 8004900:	4618      	mov	r0, r3
 8004902:	f7fe ff99 	bl	8003838 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3318      	adds	r3, #24
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe ff90 	bl	8003838 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491c:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <xTaskIncrementTick+0x160>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d903      	bls.n	800492c <xTaskIncrementTick+0xd8>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <xTaskIncrementTick+0x160>)
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4a1f      	ldr	r2, [pc, #124]	; (80049b8 <xTaskIncrementTick+0x164>)
 800493a:	441a      	add	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f7fe ff1b 	bl	800377e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <xTaskIncrementTick+0x168>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	429a      	cmp	r2, r3
 8004954:	d3b8      	bcc.n	80048c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004956:	2301      	movs	r3, #1
 8004958:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800495a:	e7b5      	b.n	80048c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800495c:	4b17      	ldr	r3, [pc, #92]	; (80049bc <xTaskIncrementTick+0x168>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004962:	4915      	ldr	r1, [pc, #84]	; (80049b8 <xTaskIncrementTick+0x164>)
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d901      	bls.n	8004978 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004974:	2301      	movs	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004978:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <xTaskIncrementTick+0x16c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004980:	2301      	movs	r3, #1
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	e004      	b.n	8004990 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004986:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <xTaskIncrementTick+0x170>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3301      	adds	r3, #1
 800498c:	4a0d      	ldr	r2, [pc, #52]	; (80049c4 <xTaskIncrementTick+0x170>)
 800498e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004990:	697b      	ldr	r3, [r7, #20]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000d70 	.word	0x20000d70
 80049a0:	20000d4c 	.word	0x20000d4c
 80049a4:	20000d00 	.word	0x20000d00
 80049a8:	20000d04 	.word	0x20000d04
 80049ac:	20000d60 	.word	0x20000d60
 80049b0:	20000d68 	.word	0x20000d68
 80049b4:	20000d50 	.word	0x20000d50
 80049b8:	20000878 	.word	0x20000878
 80049bc:	20000874 	.word	0x20000874
 80049c0:	20000d5c 	.word	0x20000d5c
 80049c4:	20000d58 	.word	0x20000d58

080049c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049ce:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <vTaskSwitchContext+0xa8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049d6:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <vTaskSwitchContext+0xac>)
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049dc:	e041      	b.n	8004a62 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80049de:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <vTaskSwitchContext+0xac>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e4:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <vTaskSwitchContext+0xb0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	e010      	b.n	8004a0e <vTaskSwitchContext+0x46>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <vTaskSwitchContext+0x40>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	607b      	str	r3, [r7, #4]
}
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <vTaskSwitchContext+0x3e>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	491b      	ldr	r1, [pc, #108]	; (8004a7c <vTaskSwitchContext+0xb4>)
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0e4      	beq.n	80049ec <vTaskSwitchContext+0x24>
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4a13      	ldr	r2, [pc, #76]	; (8004a7c <vTaskSwitchContext+0xb4>)
 8004a2e:	4413      	add	r3, r2
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	3308      	adds	r3, #8
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d104      	bne.n	8004a52 <vTaskSwitchContext+0x8a>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <vTaskSwitchContext+0xb8>)
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	4a06      	ldr	r2, [pc, #24]	; (8004a78 <vTaskSwitchContext+0xb0>)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6013      	str	r3, [r2, #0]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000d70 	.word	0x20000d70
 8004a74:	20000d5c 	.word	0x20000d5c
 8004a78:	20000d50 	.word	0x20000d50
 8004a7c:	20000878 	.word	0x20000878
 8004a80:	20000874 	.word	0x20000874

08004a84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	60fb      	str	r3, [r7, #12]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <vTaskPlaceOnEventList+0x44>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3318      	adds	r3, #24
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fe fe87 	bl	80037c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ab8:	2101      	movs	r1, #1
 8004aba:	6838      	ldr	r0, [r7, #0]
 8004abc:	f000 fa7c 	bl	8004fb8 <prvAddCurrentTaskToDelayedList>
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000874 	.word	0x20000874

08004acc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10a      	bne.n	8004af4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	617b      	str	r3, [r7, #20]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <vTaskPlaceOnEventListRestricted+0x54>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3318      	adds	r3, #24
 8004afa:	4619      	mov	r1, r3
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7fe fe3e 	bl	800377e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	68b8      	ldr	r0, [r7, #8]
 8004b12:	f000 fa51 	bl	8004fb8 <prvAddCurrentTaskToDelayedList>
	}
 8004b16:	bf00      	nop
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000874 	.word	0x20000874

08004b24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	60fb      	str	r3, [r7, #12]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	3318      	adds	r3, #24
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe fe6f 	bl	8003838 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b5a:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <xTaskRemoveFromEventList+0xb0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d11d      	bne.n	8004b9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe fe66 	bl	8003838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <xTaskRemoveFromEventList+0xb4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d903      	bls.n	8004b80 <xTaskRemoveFromEventList+0x5c>
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4a16      	ldr	r2, [pc, #88]	; (8004bd8 <xTaskRemoveFromEventList+0xb4>)
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4a13      	ldr	r2, [pc, #76]	; (8004bdc <xTaskRemoveFromEventList+0xb8>)
 8004b8e:	441a      	add	r2, r3
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f7fe fdf1 	bl	800377e <vListInsertEnd>
 8004b9c:	e005      	b.n	8004baa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3318      	adds	r3, #24
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	480e      	ldr	r0, [pc, #56]	; (8004be0 <xTaskRemoveFromEventList+0xbc>)
 8004ba6:	f7fe fdea 	bl	800377e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <xTaskRemoveFromEventList+0xc0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d905      	bls.n	8004bc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <xTaskRemoveFromEventList+0xc4>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e001      	b.n	8004bc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bc8:	697b      	ldr	r3, [r7, #20]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000d70 	.word	0x20000d70
 8004bd8:	20000d50 	.word	0x20000d50
 8004bdc:	20000878 	.word	0x20000878
 8004be0:	20000d08 	.word	0x20000d08
 8004be4:	20000874 	.word	0x20000874
 8004be8:	20000d5c 	.word	0x20000d5c

08004bec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <vTaskInternalSetTimeOutState+0x24>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <vTaskInternalSetTimeOutState+0x28>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	605a      	str	r2, [r3, #4]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	20000d60 	.word	0x20000d60
 8004c14:	20000d4c 	.word	0x20000d4c

08004c18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	613b      	str	r3, [r7, #16]
}
 8004c3a:	bf00      	nop
 8004c3c:	e7fe      	b.n	8004c3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	60fb      	str	r3, [r7, #12]
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c5a:	f000 fe7b 	bl	8005954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c5e:	4b1d      	ldr	r3, [pc, #116]	; (8004cd4 <xTaskCheckForTimeOut+0xbc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c76:	d102      	bne.n	8004c7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	e023      	b.n	8004cc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <xTaskCheckForTimeOut+0xc0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d007      	beq.n	8004c9a <xTaskCheckForTimeOut+0x82>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c94:	2301      	movs	r3, #1
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e015      	b.n	8004cc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d20b      	bcs.n	8004cbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	1ad2      	subs	r2, r2, r3
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff ff9b 	bl	8004bec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	e004      	b.n	8004cc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cc6:	f000 fe75 	bl	80059b4 <vPortExitCritical>

	return xReturn;
 8004cca:	69fb      	ldr	r3, [r7, #28]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20000d4c 	.word	0x20000d4c
 8004cd8:	20000d60 	.word	0x20000d60

08004cdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <vTaskMissedYield+0x14>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	20000d5c 	.word	0x20000d5c

08004cf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cfc:	f000 f852 	bl	8004da4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <prvIdleTask+0x28>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d9f9      	bls.n	8004cfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <prvIdleTask+0x2c>)
 8004d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d18:	e7f0      	b.n	8004cfc <prvIdleTask+0x8>
 8004d1a:	bf00      	nop
 8004d1c:	20000878 	.word	0x20000878
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	607b      	str	r3, [r7, #4]
 8004d2e:	e00c      	b.n	8004d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4a12      	ldr	r2, [pc, #72]	; (8004d84 <prvInitialiseTaskLists+0x60>)
 8004d3c:	4413      	add	r3, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe fcf0 	bl	8003724 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3301      	adds	r3, #1
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b37      	cmp	r3, #55	; 0x37
 8004d4e:	d9ef      	bls.n	8004d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d50:	480d      	ldr	r0, [pc, #52]	; (8004d88 <prvInitialiseTaskLists+0x64>)
 8004d52:	f7fe fce7 	bl	8003724 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d56:	480d      	ldr	r0, [pc, #52]	; (8004d8c <prvInitialiseTaskLists+0x68>)
 8004d58:	f7fe fce4 	bl	8003724 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d5c:	480c      	ldr	r0, [pc, #48]	; (8004d90 <prvInitialiseTaskLists+0x6c>)
 8004d5e:	f7fe fce1 	bl	8003724 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d62:	480c      	ldr	r0, [pc, #48]	; (8004d94 <prvInitialiseTaskLists+0x70>)
 8004d64:	f7fe fcde 	bl	8003724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d68:	480b      	ldr	r0, [pc, #44]	; (8004d98 <prvInitialiseTaskLists+0x74>)
 8004d6a:	f7fe fcdb 	bl	8003724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <prvInitialiseTaskLists+0x78>)
 8004d70:	4a05      	ldr	r2, [pc, #20]	; (8004d88 <prvInitialiseTaskLists+0x64>)
 8004d72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d74:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <prvInitialiseTaskLists+0x7c>)
 8004d76:	4a05      	ldr	r2, [pc, #20]	; (8004d8c <prvInitialiseTaskLists+0x68>)
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000878 	.word	0x20000878
 8004d88:	20000cd8 	.word	0x20000cd8
 8004d8c:	20000cec 	.word	0x20000cec
 8004d90:	20000d08 	.word	0x20000d08
 8004d94:	20000d1c 	.word	0x20000d1c
 8004d98:	20000d34 	.word	0x20000d34
 8004d9c:	20000d00 	.word	0x20000d00
 8004da0:	20000d04 	.word	0x20000d04

08004da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004daa:	e019      	b.n	8004de0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004dac:	f000 fdd2 	bl	8005954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004db0:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <prvCheckTasksWaitingTermination+0x50>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe fd3b 	bl	8003838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <prvCheckTasksWaitingTermination+0x54>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	4a0b      	ldr	r2, [pc, #44]	; (8004df8 <prvCheckTasksWaitingTermination+0x54>)
 8004dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <prvCheckTasksWaitingTermination+0x58>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <prvCheckTasksWaitingTermination+0x58>)
 8004dd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dd6:	f000 fded 	bl	80059b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f810 	bl	8004e00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004de0:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <prvCheckTasksWaitingTermination+0x58>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e1      	bne.n	8004dac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000d1c 	.word	0x20000d1c
 8004df8:	20000d48 	.word	0x20000d48
 8004dfc:	20000d30 	.word	0x20000d30

08004e00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d108      	bne.n	8004e24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 ff8a 	bl	8005d30 <vPortFree>
				vPortFree( pxTCB );
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 ff87 	bl	8005d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e22:	e018      	b.n	8004e56 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d103      	bne.n	8004e36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 ff7e 	bl	8005d30 <vPortFree>
	}
 8004e34:	e00f      	b.n	8004e56 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d00a      	beq.n	8004e56 <prvDeleteTCB+0x56>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	60fb      	str	r3, [r7, #12]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <prvDeleteTCB+0x54>
	}
 8004e56:	bf00      	nop
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <prvResetNextTaskUnblockTime+0x38>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d104      	bne.n	8004e7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <prvResetNextTaskUnblockTime+0x3c>)
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e78:	e008      	b.n	8004e8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <prvResetNextTaskUnblockTime+0x38>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a04      	ldr	r2, [pc, #16]	; (8004e9c <prvResetNextTaskUnblockTime+0x3c>)
 8004e8a:	6013      	str	r3, [r2, #0]
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	20000d00 	.word	0x20000d00
 8004e9c:	20000d68 	.word	0x20000d68

08004ea0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <xTaskGetSchedulerState+0x34>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	e008      	b.n	8004ec6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb4:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <xTaskGetSchedulerState+0x38>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	607b      	str	r3, [r7, #4]
 8004ec0:	e001      	b.n	8004ec6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ec6:	687b      	ldr	r3, [r7, #4]
	}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	20000d54 	.word	0x20000d54
 8004ed8:	20000d70 	.word	0x20000d70

08004edc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d056      	beq.n	8004fa0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ef2:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <xTaskPriorityDisinherit+0xd0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d00a      	beq.n	8004f12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	60fb      	str	r3, [r7, #12]
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	60bb      	str	r3, [r7, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d02c      	beq.n	8004fa0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d128      	bne.n	8004fa0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe fc70 	bl	8003838 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f70:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <xTaskPriorityDisinherit+0xd4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d903      	bls.n	8004f80 <xTaskPriorityDisinherit+0xa4>
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	4a0c      	ldr	r2, [pc, #48]	; (8004fb0 <xTaskPriorityDisinherit+0xd4>)
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <xTaskPriorityDisinherit+0xd8>)
 8004f8e:	441a      	add	r2, r3
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f7fe fbf1 	bl	800377e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fa0:	697b      	ldr	r3, [r7, #20]
	}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000874 	.word	0x20000874
 8004fb0:	20000d50 	.word	0x20000d50
 8004fb4:	20000878 	.word	0x20000878

08004fb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fc2:	4b21      	ldr	r3, [pc, #132]	; (8005048 <prvAddCurrentTaskToDelayedList+0x90>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fc8:	4b20      	ldr	r3, [pc, #128]	; (800504c <prvAddCurrentTaskToDelayedList+0x94>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe fc32 	bl	8003838 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fda:	d10a      	bne.n	8004ff2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe2:	4b1a      	ldr	r3, [pc, #104]	; (800504c <prvAddCurrentTaskToDelayedList+0x94>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4819      	ldr	r0, [pc, #100]	; (8005050 <prvAddCurrentTaskToDelayedList+0x98>)
 8004fec:	f7fe fbc7 	bl	800377e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ff0:	e026      	b.n	8005040 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ffa:	4b14      	ldr	r3, [pc, #80]	; (800504c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	429a      	cmp	r2, r3
 8005008:	d209      	bcs.n	800501e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800500a:	4b12      	ldr	r3, [pc, #72]	; (8005054 <prvAddCurrentTaskToDelayedList+0x9c>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b0f      	ldr	r3, [pc, #60]	; (800504c <prvAddCurrentTaskToDelayedList+0x94>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f7fe fbd5 	bl	80037c6 <vListInsert>
}
 800501c:	e010      	b.n	8005040 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800501e:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <prvAddCurrentTaskToDelayedList+0x94>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f7fe fbcb 	bl	80037c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	429a      	cmp	r2, r3
 8005038:	d202      	bcs.n	8005040 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800503a:	4a08      	ldr	r2, [pc, #32]	; (800505c <prvAddCurrentTaskToDelayedList+0xa4>)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000d4c 	.word	0x20000d4c
 800504c:	20000874 	.word	0x20000874
 8005050:	20000d34 	.word	0x20000d34
 8005054:	20000d04 	.word	0x20000d04
 8005058:	20000d00 	.word	0x20000d00
 800505c:	20000d68 	.word	0x20000d68

08005060 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800506a:	f000 fb07 	bl	800567c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800506e:	4b1c      	ldr	r3, [pc, #112]	; (80050e0 <xTimerCreateTimerTask+0x80>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d021      	beq.n	80050ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800507e:	1d3a      	adds	r2, r7, #4
 8005080:	f107 0108 	add.w	r1, r7, #8
 8005084:	f107 030c 	add.w	r3, r7, #12
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe fb31 	bl	80036f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	9202      	str	r2, [sp, #8]
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	2302      	movs	r3, #2
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	2300      	movs	r3, #0
 800509e:	460a      	mov	r2, r1
 80050a0:	4910      	ldr	r1, [pc, #64]	; (80050e4 <xTimerCreateTimerTask+0x84>)
 80050a2:	4811      	ldr	r0, [pc, #68]	; (80050e8 <xTimerCreateTimerTask+0x88>)
 80050a4:	f7ff f8de 	bl	8004264 <xTaskCreateStatic>
 80050a8:	4603      	mov	r3, r0
 80050aa:	4a10      	ldr	r2, [pc, #64]	; (80050ec <xTimerCreateTimerTask+0x8c>)
 80050ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050ae:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <xTimerCreateTimerTask+0x8c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80050b6:	2301      	movs	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	613b      	str	r3, [r7, #16]
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050d6:	697b      	ldr	r3, [r7, #20]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000da4 	.word	0x20000da4
 80050e4:	0800600c 	.word	0x0800600c
 80050e8:	08005225 	.word	0x08005225
 80050ec:	20000da8 	.word	0x20000da8

080050f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050fe:	2300      	movs	r3, #0
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	623b      	str	r3, [r7, #32]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800511e:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <xTimerGenericCommand+0x98>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d02a      	beq.n	800517c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b05      	cmp	r3, #5
 8005136:	dc18      	bgt.n	800516a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005138:	f7ff feb2 	bl	8004ea0 <xTaskGetSchedulerState>
 800513c:	4603      	mov	r3, r0
 800513e:	2b02      	cmp	r3, #2
 8005140:	d109      	bne.n	8005156 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <xTimerGenericCommand+0x98>)
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	f107 0110 	add.w	r1, r7, #16
 800514a:	2300      	movs	r3, #0
 800514c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800514e:	f7fe fca1 	bl	8003a94 <xQueueGenericSend>
 8005152:	6278      	str	r0, [r7, #36]	; 0x24
 8005154:	e012      	b.n	800517c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005156:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <xTimerGenericCommand+0x98>)
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	f107 0110 	add.w	r1, r7, #16
 800515e:	2300      	movs	r3, #0
 8005160:	2200      	movs	r2, #0
 8005162:	f7fe fc97 	bl	8003a94 <xQueueGenericSend>
 8005166:	6278      	str	r0, [r7, #36]	; 0x24
 8005168:	e008      	b.n	800517c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <xTimerGenericCommand+0x98>)
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	f107 0110 	add.w	r1, r7, #16
 8005172:	2300      	movs	r3, #0
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	f7fe fd8b 	bl	8003c90 <xQueueGenericSendFromISR>
 800517a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800517e:	4618      	mov	r0, r3
 8005180:	3728      	adds	r7, #40	; 0x28
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000da4 	.word	0x20000da4

0800518c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af02      	add	r7, sp, #8
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005196:	4b22      	ldr	r3, [pc, #136]	; (8005220 <prvProcessExpiredTimer+0x94>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe fb47 	bl	8003838 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d022      	beq.n	80051fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	18d1      	adds	r1, r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	6978      	ldr	r0, [r7, #20]
 80051c6:	f000 f8d1 	bl	800536c <prvInsertTimerInActiveList>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01f      	beq.n	8005210 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051d0:	2300      	movs	r3, #0
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	2100      	movs	r1, #0
 80051da:	6978      	ldr	r0, [r7, #20]
 80051dc:	f7ff ff88 	bl	80050f0 <xTimerGenericCommand>
 80051e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d113      	bne.n	8005210 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	60fb      	str	r3, [r7, #12]
}
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	b2da      	uxtb	r2, r3
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	6978      	ldr	r0, [r7, #20]
 8005216:	4798      	blx	r3
}
 8005218:	bf00      	nop
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	20000d9c 	.word	0x20000d9c

08005224 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800522c:	f107 0308 	add.w	r3, r7, #8
 8005230:	4618      	mov	r0, r3
 8005232:	f000 f857 	bl	80052e4 <prvGetNextExpireTime>
 8005236:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4619      	mov	r1, r3
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f803 	bl	8005248 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005242:	f000 f8d5 	bl	80053f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005246:	e7f1      	b.n	800522c <prvTimerTask+0x8>

08005248 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005252:	f7ff fa43 	bl	80046dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005256:	f107 0308 	add.w	r3, r7, #8
 800525a:	4618      	mov	r0, r3
 800525c:	f000 f866 	bl	800532c <prvSampleTimeNow>
 8005260:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d130      	bne.n	80052ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <prvProcessTimerOrBlockTask+0x3c>
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	429a      	cmp	r2, r3
 8005274:	d806      	bhi.n	8005284 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005276:	f7ff fa3f 	bl	80046f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800527a:	68f9      	ldr	r1, [r7, #12]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff ff85 	bl	800518c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005282:	e024      	b.n	80052ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <prvProcessTimerOrBlockTask+0x90>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <prvProcessTimerOrBlockTask+0x50>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <prvProcessTimerOrBlockTask+0x52>
 8005298:	2300      	movs	r3, #0
 800529a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <prvProcessTimerOrBlockTask+0x94>)
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	4619      	mov	r1, r3
 80052aa:	f7fe ffa7 	bl	80041fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052ae:	f7ff fa23 	bl	80046f8 <xTaskResumeAll>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <prvProcessTimerOrBlockTask+0x98>)
 80052ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	f3bf 8f6f 	isb	sy
}
 80052c8:	e001      	b.n	80052ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052ca:	f7ff fa15 	bl	80046f8 <xTaskResumeAll>
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000da0 	.word	0x20000da0
 80052dc:	20000da4 	.word	0x20000da4
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052ec:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <prvGetNextExpireTime+0x44>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <prvGetNextExpireTime+0x16>
 80052f6:	2201      	movs	r2, #1
 80052f8:	e000      	b.n	80052fc <prvGetNextExpireTime+0x18>
 80052fa:	2200      	movs	r2, #0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005308:	4b07      	ldr	r3, [pc, #28]	; (8005328 <prvGetNextExpireTime+0x44>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	e001      	b.n	8005318 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005318:	68fb      	ldr	r3, [r7, #12]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000d9c 	.word	0x20000d9c

0800532c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005334:	f7ff fa7e 	bl	8004834 <xTaskGetTickCount>
 8005338:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <prvSampleTimeNow+0x3c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	429a      	cmp	r2, r3
 8005342:	d205      	bcs.n	8005350 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005344:	f000 f936 	bl	80055b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e002      	b.n	8005356 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005356:	4a04      	ldr	r2, [pc, #16]	; (8005368 <prvSampleTimeNow+0x3c>)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800535c:	68fb      	ldr	r3, [r7, #12]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000dac 	.word	0x20000dac

0800536c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	429a      	cmp	r2, r3
 8005390:	d812      	bhi.n	80053b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	429a      	cmp	r2, r3
 800539e:	d302      	bcc.n	80053a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053a0:	2301      	movs	r3, #1
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e01b      	b.n	80053de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <prvInsertTimerInActiveList+0x7c>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	4610      	mov	r0, r2
 80053b2:	f7fe fa08 	bl	80037c6 <vListInsert>
 80053b6:	e012      	b.n	80053de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d206      	bcs.n	80053ce <prvInsertTimerInActiveList+0x62>
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d302      	bcc.n	80053ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e007      	b.n	80053de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053ce:	4b07      	ldr	r3, [pc, #28]	; (80053ec <prvInsertTimerInActiveList+0x80>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7fe f9f4 	bl	80037c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053de:	697b      	ldr	r3, [r7, #20]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20000da0 	.word	0x20000da0
 80053ec:	20000d9c 	.word	0x20000d9c

080053f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08e      	sub	sp, #56	; 0x38
 80053f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053f6:	e0ca      	b.n	800558e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da18      	bge.n	8005430 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053fe:	1d3b      	adds	r3, r7, #4
 8005400:	3304      	adds	r3, #4
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	61fb      	str	r3, [r7, #28]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005426:	6850      	ldr	r0, [r2, #4]
 8005428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542a:	6892      	ldr	r2, [r2, #8]
 800542c:	4611      	mov	r1, r2
 800542e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f2c0 80aa 	blt.w	800558c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d004      	beq.n	800544e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	3304      	adds	r3, #4
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe f9f5 	bl	8003838 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800544e:	463b      	mov	r3, r7
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff ff6b 	bl	800532c <prvSampleTimeNow>
 8005456:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b09      	cmp	r3, #9
 800545c:	f200 8097 	bhi.w	800558e <prvProcessReceivedCommands+0x19e>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <prvProcessReceivedCommands+0x78>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	08005491 	.word	0x08005491
 800546c:	08005491 	.word	0x08005491
 8005470:	08005491 	.word	0x08005491
 8005474:	08005505 	.word	0x08005505
 8005478:	08005519 	.word	0x08005519
 800547c:	08005563 	.word	0x08005563
 8005480:	08005491 	.word	0x08005491
 8005484:	08005491 	.word	0x08005491
 8005488:	08005505 	.word	0x08005505
 800548c:	08005519 	.word	0x08005519
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	b2da      	uxtb	r2, r3
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	18d1      	adds	r1, r2, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b0:	f7ff ff5c 	bl	800536c <prvInsertTimerInActiveList>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d069      	beq.n	800558e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d05e      	beq.n	800558e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	441a      	add	r2, r3
 80054d8:	2300      	movs	r3, #0
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	2300      	movs	r3, #0
 80054de:	2100      	movs	r1, #0
 80054e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e2:	f7ff fe05 	bl	80050f0 <xTimerGenericCommand>
 80054e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d14f      	bne.n	800558e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	61bb      	str	r3, [r7, #24]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	b2da      	uxtb	r2, r3
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005516:	e03a      	b.n	800558e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	b2da      	uxtb	r2, r3
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	617b      	str	r3, [r7, #20]
}
 800554a:	bf00      	nop
 800554c:	e7fe      	b.n	800554c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	18d1      	adds	r1, r2, r3
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555c:	f7ff ff06 	bl	800536c <prvInsertTimerInActiveList>
					break;
 8005560:	e015      	b.n	800558e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d103      	bne.n	8005578 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005572:	f000 fbdd 	bl	8005d30 <vPortFree>
 8005576:	e00a      	b.n	800558e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	b2da      	uxtb	r2, r3
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800558a:	e000      	b.n	800558e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800558c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800558e:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <prvProcessReceivedCommands+0x1c0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	1d39      	adds	r1, r7, #4
 8005594:	2200      	movs	r2, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f7fe fc16 	bl	8003dc8 <xQueueReceive>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f47f af2a 	bne.w	80053f8 <prvProcessReceivedCommands+0x8>
	}
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	3730      	adds	r7, #48	; 0x30
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000da4 	.word	0x20000da4

080055b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055ba:	e048      	b.n	800564e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055bc:	4b2d      	ldr	r3, [pc, #180]	; (8005674 <prvSwitchTimerLists+0xc0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c6:	4b2b      	ldr	r3, [pc, #172]	; (8005674 <prvSwitchTimerLists+0xc0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fe f92f 	bl	8003838 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d02e      	beq.n	800564e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4413      	add	r3, r2
 80055f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d90e      	bls.n	8005620 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800560e:	4b19      	ldr	r3, [pc, #100]	; (8005674 <prvSwitchTimerLists+0xc0>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3304      	adds	r3, #4
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f7fe f8d4 	bl	80037c6 <vListInsert>
 800561e:	e016      	b.n	800564e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005620:	2300      	movs	r3, #0
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	2100      	movs	r1, #0
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff fd60 	bl	80050f0 <xTimerGenericCommand>
 8005630:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	603b      	str	r3, [r7, #0]
}
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800564e:	4b09      	ldr	r3, [pc, #36]	; (8005674 <prvSwitchTimerLists+0xc0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1b1      	bne.n	80055bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <prvSwitchTimerLists+0xc0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <prvSwitchTimerLists+0xc4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a04      	ldr	r2, [pc, #16]	; (8005674 <prvSwitchTimerLists+0xc0>)
 8005664:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005666:	4a04      	ldr	r2, [pc, #16]	; (8005678 <prvSwitchTimerLists+0xc4>)
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	6013      	str	r3, [r2, #0]
}
 800566c:	bf00      	nop
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000d9c 	.word	0x20000d9c
 8005678:	20000da0 	.word	0x20000da0

0800567c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005682:	f000 f967 	bl	8005954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005686:	4b15      	ldr	r3, [pc, #84]	; (80056dc <prvCheckForValidListAndQueue+0x60>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d120      	bne.n	80056d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800568e:	4814      	ldr	r0, [pc, #80]	; (80056e0 <prvCheckForValidListAndQueue+0x64>)
 8005690:	f7fe f848 	bl	8003724 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005694:	4813      	ldr	r0, [pc, #76]	; (80056e4 <prvCheckForValidListAndQueue+0x68>)
 8005696:	f7fe f845 	bl	8003724 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <prvCheckForValidListAndQueue+0x6c>)
 800569c:	4a10      	ldr	r2, [pc, #64]	; (80056e0 <prvCheckForValidListAndQueue+0x64>)
 800569e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056a0:	4b12      	ldr	r3, [pc, #72]	; (80056ec <prvCheckForValidListAndQueue+0x70>)
 80056a2:	4a10      	ldr	r2, [pc, #64]	; (80056e4 <prvCheckForValidListAndQueue+0x68>)
 80056a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056a6:	2300      	movs	r3, #0
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <prvCheckForValidListAndQueue+0x74>)
 80056ac:	4a11      	ldr	r2, [pc, #68]	; (80056f4 <prvCheckForValidListAndQueue+0x78>)
 80056ae:	2110      	movs	r1, #16
 80056b0:	200a      	movs	r0, #10
 80056b2:	f7fe f953 	bl	800395c <xQueueGenericCreateStatic>
 80056b6:	4603      	mov	r3, r0
 80056b8:	4a08      	ldr	r2, [pc, #32]	; (80056dc <prvCheckForValidListAndQueue+0x60>)
 80056ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056bc:	4b07      	ldr	r3, [pc, #28]	; (80056dc <prvCheckForValidListAndQueue+0x60>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <prvCheckForValidListAndQueue+0x60>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	490b      	ldr	r1, [pc, #44]	; (80056f8 <prvCheckForValidListAndQueue+0x7c>)
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fe fd6c 	bl	80041a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056d0:	f000 f970 	bl	80059b4 <vPortExitCritical>
}
 80056d4:	bf00      	nop
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000da4 	.word	0x20000da4
 80056e0:	20000d74 	.word	0x20000d74
 80056e4:	20000d88 	.word	0x20000d88
 80056e8:	20000d9c 	.word	0x20000d9c
 80056ec:	20000da0 	.word	0x20000da0
 80056f0:	20000e50 	.word	0x20000e50
 80056f4:	20000db0 	.word	0x20000db0
 80056f8:	08006014 	.word	0x08006014

080056fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3b04      	subs	r3, #4
 800570c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3b04      	subs	r3, #4
 800571a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f023 0201 	bic.w	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3b04      	subs	r3, #4
 800572a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800572c:	4a0c      	ldr	r2, [pc, #48]	; (8005760 <pxPortInitialiseStack+0x64>)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3b14      	subs	r3, #20
 8005736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3b04      	subs	r3, #4
 8005742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f06f 0202 	mvn.w	r2, #2
 800574a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3b20      	subs	r3, #32
 8005750:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005752:	68fb      	ldr	r3, [r7, #12]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	08005765 	.word	0x08005765

08005764 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <prvTaskExitError+0x54>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005776:	d00a      	beq.n	800578e <prvTaskExitError+0x2a>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	60fb      	str	r3, [r7, #12]
}
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <prvTaskExitError+0x28>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60bb      	str	r3, [r7, #8]
}
 80057a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057a2:	bf00      	nop
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0fc      	beq.n	80057a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057aa:	bf00      	nop
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	2000000c 	.word	0x2000000c
 80057bc:	00000000 	.word	0x00000000

080057c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057c0:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <pxCurrentTCBConst2>)
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	6808      	ldr	r0, [r1, #0]
 80057c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	f380 8809 	msr	PSP, r0
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f380 8811 	msr	BASEPRI, r0
 80057da:	4770      	bx	lr
 80057dc:	f3af 8000 	nop.w

080057e0 <pxCurrentTCBConst2>:
 80057e0:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057e8:	4808      	ldr	r0, [pc, #32]	; (800580c <prvPortStartFirstTask+0x24>)
 80057ea:	6800      	ldr	r0, [r0, #0]
 80057ec:	6800      	ldr	r0, [r0, #0]
 80057ee:	f380 8808 	msr	MSP, r0
 80057f2:	f04f 0000 	mov.w	r0, #0
 80057f6:	f380 8814 	msr	CONTROL, r0
 80057fa:	b662      	cpsie	i
 80057fc:	b661      	cpsie	f
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	df00      	svc	0
 8005808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800580a:	bf00      	nop
 800580c:	e000ed08 	.word	0xe000ed08

08005810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005816:	4b46      	ldr	r3, [pc, #280]	; (8005930 <xPortStartScheduler+0x120>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a46      	ldr	r2, [pc, #280]	; (8005934 <xPortStartScheduler+0x124>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10a      	bne.n	8005836 <xPortStartScheduler+0x26>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	613b      	str	r3, [r7, #16]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005836:	4b3e      	ldr	r3, [pc, #248]	; (8005930 <xPortStartScheduler+0x120>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a3f      	ldr	r2, [pc, #252]	; (8005938 <xPortStartScheduler+0x128>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d10a      	bne.n	8005856 <xPortStartScheduler+0x46>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	60fb      	str	r3, [r7, #12]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005856:	4b39      	ldr	r3, [pc, #228]	; (800593c <xPortStartScheduler+0x12c>)
 8005858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	22ff      	movs	r2, #255	; 0xff
 8005866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005878:	b2da      	uxtb	r2, r3
 800587a:	4b31      	ldr	r3, [pc, #196]	; (8005940 <xPortStartScheduler+0x130>)
 800587c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800587e:	4b31      	ldr	r3, [pc, #196]	; (8005944 <xPortStartScheduler+0x134>)
 8005880:	2207      	movs	r2, #7
 8005882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005884:	e009      	b.n	800589a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005886:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <xPortStartScheduler+0x134>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3b01      	subs	r3, #1
 800588c:	4a2d      	ldr	r2, [pc, #180]	; (8005944 <xPortStartScheduler+0x134>)
 800588e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	b2db      	uxtb	r3, r3
 8005898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a2:	2b80      	cmp	r3, #128	; 0x80
 80058a4:	d0ef      	beq.n	8005886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058a6:	4b27      	ldr	r3, [pc, #156]	; (8005944 <xPortStartScheduler+0x134>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f1c3 0307 	rsb	r3, r3, #7
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d00a      	beq.n	80058c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60bb      	str	r3, [r7, #8]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058c8:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <xPortStartScheduler+0x134>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <xPortStartScheduler+0x134>)
 80058d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058d2:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <xPortStartScheduler+0x134>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058da:	4a1a      	ldr	r2, [pc, #104]	; (8005944 <xPortStartScheduler+0x134>)
 80058dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058e6:	4b18      	ldr	r3, [pc, #96]	; (8005948 <xPortStartScheduler+0x138>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a17      	ldr	r2, [pc, #92]	; (8005948 <xPortStartScheduler+0x138>)
 80058ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058f2:	4b15      	ldr	r3, [pc, #84]	; (8005948 <xPortStartScheduler+0x138>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a14      	ldr	r2, [pc, #80]	; (8005948 <xPortStartScheduler+0x138>)
 80058f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058fe:	f000 f8dd 	bl	8005abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005902:	4b12      	ldr	r3, [pc, #72]	; (800594c <xPortStartScheduler+0x13c>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005908:	f000 f8fc 	bl	8005b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800590c:	4b10      	ldr	r3, [pc, #64]	; (8005950 <xPortStartScheduler+0x140>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0f      	ldr	r2, [pc, #60]	; (8005950 <xPortStartScheduler+0x140>)
 8005912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005918:	f7ff ff66 	bl	80057e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800591c:	f7ff f854 	bl	80049c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005920:	f7ff ff20 	bl	8005764 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	e000ed00 	.word	0xe000ed00
 8005934:	410fc271 	.word	0x410fc271
 8005938:	410fc270 	.word	0x410fc270
 800593c:	e000e400 	.word	0xe000e400
 8005940:	20000ea0 	.word	0x20000ea0
 8005944:	20000ea4 	.word	0x20000ea4
 8005948:	e000ed20 	.word	0xe000ed20
 800594c:	2000000c 	.word	0x2000000c
 8005950:	e000ef34 	.word	0xe000ef34

08005954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	607b      	str	r3, [r7, #4]
}
 800596c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800596e:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <vPortEnterCritical+0x58>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	4a0d      	ldr	r2, [pc, #52]	; (80059ac <vPortEnterCritical+0x58>)
 8005976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <vPortEnterCritical+0x58>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d10f      	bne.n	80059a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <vPortEnterCritical+0x5c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	603b      	str	r3, [r7, #0]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <vPortEnterCritical+0x4a>
	}
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	2000000c 	.word	0x2000000c
 80059b0:	e000ed04 	.word	0xe000ed04

080059b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <vPortExitCritical+0x50>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <vPortExitCritical+0x24>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	607b      	str	r3, [r7, #4]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <vPortExitCritical+0x50>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3b01      	subs	r3, #1
 80059de:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <vPortExitCritical+0x50>)
 80059e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059e2:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <vPortExitCritical+0x50>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d105      	bne.n	80059f6 <vPortExitCritical+0x42>
 80059ea:	2300      	movs	r3, #0
 80059ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	f383 8811 	msr	BASEPRI, r3
}
 80059f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	2000000c 	.word	0x2000000c
	...

08005a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a10:	f3ef 8009 	mrs	r0, PSP
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <pxCurrentTCBConst>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	f01e 0f10 	tst.w	lr, #16
 8005a20:	bf08      	it	eq
 8005a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2a:	6010      	str	r0, [r2, #0]
 8005a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a34:	f380 8811 	msr	BASEPRI, r0
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f7fe ffc2 	bl	80049c8 <vTaskSwitchContext>
 8005a44:	f04f 0000 	mov.w	r0, #0
 8005a48:	f380 8811 	msr	BASEPRI, r0
 8005a4c:	bc09      	pop	{r0, r3}
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	6808      	ldr	r0, [r1, #0]
 8005a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a56:	f01e 0f10 	tst.w	lr, #16
 8005a5a:	bf08      	it	eq
 8005a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a60:	f380 8809 	msr	PSP, r0
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	f3af 8000 	nop.w

08005a70 <pxCurrentTCBConst>:
 8005a70:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop

08005a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a92:	f7fe fedf 	bl	8004854 <xTaskIncrementTick>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <xPortSysTickHandler+0x40>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
}
 8005aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <vPortSetupTimerInterrupt+0x34>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <vPortSetupTimerInterrupt+0x38>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005acc:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <vPortSetupTimerInterrupt+0x3c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	; (8005afc <vPortSetupTimerInterrupt+0x40>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <vPortSetupTimerInterrupt+0x44>)
 8005ada:	3b01      	subs	r3, #1
 8005adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ade:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <vPortSetupTimerInterrupt+0x34>)
 8005ae0:	2207      	movs	r2, #7
 8005ae2:	601a      	str	r2, [r3, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000e010 	.word	0xe000e010
 8005af4:	e000e018 	.word	0xe000e018
 8005af8:	20000000 	.word	0x20000000
 8005afc:	10624dd3 	.word	0x10624dd3
 8005b00:	e000e014 	.word	0xe000e014

08005b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b14 <vPortEnableVFP+0x10>
 8005b08:	6801      	ldr	r1, [r0, #0]
 8005b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b0e:	6001      	str	r1, [r0, #0]
 8005b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b12:	bf00      	nop
 8005b14:	e000ed88 	.word	0xe000ed88

08005b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b1e:	f3ef 8305 	mrs	r3, IPSR
 8005b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b0f      	cmp	r3, #15
 8005b28:	d914      	bls.n	8005b54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b2a:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <vPortValidateInterruptPriority+0x70>)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b34:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <vPortValidateInterruptPriority+0x74>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	7afa      	ldrb	r2, [r7, #11]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d20a      	bcs.n	8005b54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	607b      	str	r3, [r7, #4]
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b54:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <vPortValidateInterruptPriority+0x78>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <vPortValidateInterruptPriority+0x7c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d90a      	bls.n	8005b7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	603b      	str	r3, [r7, #0]
}
 8005b76:	bf00      	nop
 8005b78:	e7fe      	b.n	8005b78 <vPortValidateInterruptPriority+0x60>
	}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	e000e3f0 	.word	0xe000e3f0
 8005b8c:	20000ea0 	.word	0x20000ea0
 8005b90:	e000ed0c 	.word	0xe000ed0c
 8005b94:	20000ea4 	.word	0x20000ea4

08005b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08a      	sub	sp, #40	; 0x28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ba4:	f7fe fd9a 	bl	80046dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ba8:	4b5b      	ldr	r3, [pc, #364]	; (8005d18 <pvPortMalloc+0x180>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bb0:	f000 f920 	bl	8005df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bb4:	4b59      	ldr	r3, [pc, #356]	; (8005d1c <pvPortMalloc+0x184>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f040 8093 	bne.w	8005ce8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01d      	beq.n	8005c04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005bc8:	2208      	movs	r2, #8
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4413      	add	r3, r2
 8005bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d014      	beq.n	8005c04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f023 0307 	bic.w	r3, r3, #7
 8005be0:	3308      	adds	r3, #8
 8005be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <pvPortMalloc+0x6c>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	617b      	str	r3, [r7, #20]
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d06e      	beq.n	8005ce8 <pvPortMalloc+0x150>
 8005c0a:	4b45      	ldr	r3, [pc, #276]	; (8005d20 <pvPortMalloc+0x188>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d869      	bhi.n	8005ce8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c14:	4b43      	ldr	r3, [pc, #268]	; (8005d24 <pvPortMalloc+0x18c>)
 8005c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c18:	4b42      	ldr	r3, [pc, #264]	; (8005d24 <pvPortMalloc+0x18c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c1e:	e004      	b.n	8005c2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d903      	bls.n	8005c3c <pvPortMalloc+0xa4>
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f1      	bne.n	8005c20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c3c:	4b36      	ldr	r3, [pc, #216]	; (8005d18 <pvPortMalloc+0x180>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d050      	beq.n	8005ce8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	4413      	add	r3, r2
 8005c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	1ad2      	subs	r2, r2, r3
 8005c60:	2308      	movs	r3, #8
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d91f      	bls.n	8005ca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <pvPortMalloc+0xf8>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	613b      	str	r3, [r7, #16]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	1ad2      	subs	r2, r2, r3
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ca2:	69b8      	ldr	r0, [r7, #24]
 8005ca4:	f000 f908 	bl	8005eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ca8:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <pvPortMalloc+0x188>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	; (8005d20 <pvPortMalloc+0x188>)
 8005cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cb6:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <pvPortMalloc+0x188>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <pvPortMalloc+0x190>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d203      	bcs.n	8005cca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cc2:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <pvPortMalloc+0x188>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a18      	ldr	r2, [pc, #96]	; (8005d28 <pvPortMalloc+0x190>)
 8005cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <pvPortMalloc+0x184>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cde:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <pvPortMalloc+0x194>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	4a11      	ldr	r2, [pc, #68]	; (8005d2c <pvPortMalloc+0x194>)
 8005ce6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ce8:	f7fe fd06 	bl	80046f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <pvPortMalloc+0x174>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	60fb      	str	r3, [r7, #12]
}
 8005d08:	bf00      	nop
 8005d0a:	e7fe      	b.n	8005d0a <pvPortMalloc+0x172>
	return pvReturn;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3728      	adds	r7, #40	; 0x28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20004ab0 	.word	0x20004ab0
 8005d1c:	20004ac4 	.word	0x20004ac4
 8005d20:	20004ab4 	.word	0x20004ab4
 8005d24:	20004aa8 	.word	0x20004aa8
 8005d28:	20004ab8 	.word	0x20004ab8
 8005d2c:	20004abc 	.word	0x20004abc

08005d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d04d      	beq.n	8005dde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d42:	2308      	movs	r3, #8
 8005d44:	425b      	negs	r3, r3
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4413      	add	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <vPortFree+0xb8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <vPortFree+0x44>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	60fb      	str	r3, [r7, #12]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <vPortFree+0x62>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60bb      	str	r3, [r7, #8]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <vPortFree+0xb8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01e      	beq.n	8005dde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d11a      	bne.n	8005dde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	4b0e      	ldr	r3, [pc, #56]	; (8005de8 <vPortFree+0xb8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	43db      	mvns	r3, r3
 8005db2:	401a      	ands	r2, r3
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005db8:	f7fe fc90 	bl	80046dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <vPortFree+0xbc>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <vPortFree+0xbc>)
 8005dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dca:	6938      	ldr	r0, [r7, #16]
 8005dcc:	f000 f874 	bl	8005eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005dd0:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <vPortFree+0xc0>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	4a06      	ldr	r2, [pc, #24]	; (8005df0 <vPortFree+0xc0>)
 8005dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dda:	f7fe fc8d 	bl	80046f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dde:	bf00      	nop
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20004ac4 	.word	0x20004ac4
 8005dec:	20004ab4 	.word	0x20004ab4
 8005df0:	20004ac0 	.word	0x20004ac0

08005df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e00:	4b27      	ldr	r3, [pc, #156]	; (8005ea0 <prvHeapInit+0xac>)
 8005e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00c      	beq.n	8005e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3307      	adds	r3, #7
 8005e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0307 	bic.w	r3, r3, #7
 8005e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	4a1f      	ldr	r2, [pc, #124]	; (8005ea0 <prvHeapInit+0xac>)
 8005e24:	4413      	add	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e2c:	4a1d      	ldr	r2, [pc, #116]	; (8005ea4 <prvHeapInit+0xb0>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e32:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <prvHeapInit+0xb0>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e40:	2208      	movs	r2, #8
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0307 	bic.w	r3, r3, #7
 8005e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a15      	ldr	r2, [pc, #84]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e56:	4b14      	ldr	r3, [pc, #80]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e5e:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	1ad2      	subs	r2, r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e74:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <prvHeapInit+0xb8>)
 8005e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <prvHeapInit+0xbc>)
 8005e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <prvHeapInit+0xc0>)
 8005e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e92:	601a      	str	r2, [r3, #0]
}
 8005e94:	bf00      	nop
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	20000ea8 	.word	0x20000ea8
 8005ea4:	20004aa8 	.word	0x20004aa8
 8005ea8:	20004ab0 	.word	0x20004ab0
 8005eac:	20004ab8 	.word	0x20004ab8
 8005eb0:	20004ab4 	.word	0x20004ab4
 8005eb4:	20004ac4 	.word	0x20004ac4

08005eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ec0:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <prvInsertBlockIntoFreeList+0xac>)
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	e002      	b.n	8005ecc <prvInsertBlockIntoFreeList+0x14>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d8f7      	bhi.n	8005ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d108      	bne.n	8005efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	441a      	add	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	441a      	add	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d118      	bne.n	8005f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <prvInsertBlockIntoFreeList+0xb0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d00d      	beq.n	8005f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e008      	b.n	8005f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <prvInsertBlockIntoFreeList+0xb0>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e003      	b.n	8005f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d002      	beq.n	8005f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20004aa8 	.word	0x20004aa8
 8005f68:	20004ab0 	.word	0x20004ab0

08005f6c <__libc_init_array>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	4d0d      	ldr	r5, [pc, #52]	; (8005fa4 <__libc_init_array+0x38>)
 8005f70:	4c0d      	ldr	r4, [pc, #52]	; (8005fa8 <__libc_init_array+0x3c>)
 8005f72:	1b64      	subs	r4, r4, r5
 8005f74:	10a4      	asrs	r4, r4, #2
 8005f76:	2600      	movs	r6, #0
 8005f78:	42a6      	cmp	r6, r4
 8005f7a:	d109      	bne.n	8005f90 <__libc_init_array+0x24>
 8005f7c:	4d0b      	ldr	r5, [pc, #44]	; (8005fac <__libc_init_array+0x40>)
 8005f7e:	4c0c      	ldr	r4, [pc, #48]	; (8005fb0 <__libc_init_array+0x44>)
 8005f80:	f000 f82e 	bl	8005fe0 <_init>
 8005f84:	1b64      	subs	r4, r4, r5
 8005f86:	10a4      	asrs	r4, r4, #2
 8005f88:	2600      	movs	r6, #0
 8005f8a:	42a6      	cmp	r6, r4
 8005f8c:	d105      	bne.n	8005f9a <__libc_init_array+0x2e>
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f94:	4798      	blx	r3
 8005f96:	3601      	adds	r6, #1
 8005f98:	e7ee      	b.n	8005f78 <__libc_init_array+0xc>
 8005f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9e:	4798      	blx	r3
 8005fa0:	3601      	adds	r6, #1
 8005fa2:	e7f2      	b.n	8005f8a <__libc_init_array+0x1e>
 8005fa4:	08006068 	.word	0x08006068
 8005fa8:	08006068 	.word	0x08006068
 8005fac:	08006068 	.word	0x08006068
 8005fb0:	0800606c 	.word	0x0800606c

08005fb4 <memcpy>:
 8005fb4:	440a      	add	r2, r1
 8005fb6:	4291      	cmp	r1, r2
 8005fb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005fbc:	d100      	bne.n	8005fc0 <memcpy+0xc>
 8005fbe:	4770      	bx	lr
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fca:	4291      	cmp	r1, r2
 8005fcc:	d1f9      	bne.n	8005fc2 <memcpy+0xe>
 8005fce:	bd10      	pop	{r4, pc}

08005fd0 <memset>:
 8005fd0:	4402      	add	r2, r0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d100      	bne.n	8005fda <memset+0xa>
 8005fd8:	4770      	bx	lr
 8005fda:	f803 1b01 	strb.w	r1, [r3], #1
 8005fde:	e7f9      	b.n	8005fd4 <memset+0x4>

08005fe0 <_init>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	bf00      	nop
 8005fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe6:	bc08      	pop	{r3}
 8005fe8:	469e      	mov	lr, r3
 8005fea:	4770      	bx	lr

08005fec <_fini>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr
